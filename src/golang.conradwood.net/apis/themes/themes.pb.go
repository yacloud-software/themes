// Code generated by protoc-gen-go.
// source: protos/golang.conradwood.net/apis/themes/themes.proto
// DO NOT EDIT!

/*
Package themes is a generated protocol buffer package.

It is generated from these files:
	protos/golang.conradwood.net/apis/themes/themes.proto

It has these top-level messages:
	PingResponse
	ThemeResponse
	HostThemeRequest
*/
package themes

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "golang.conradwood.net/apis/common"
import h2gproxy "golang.conradwood.net/apis/h2gproxy"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// comment: message pingresponse
type PingResponse struct {
	// comment: field pingresponse.response
	Response string `protobuf:"bytes,1,opt,name=Response" json:"Response,omitempty"`
}

func (m *PingResponse) Reset()                    { *m = PingResponse{} }
func (m *PingResponse) String() string            { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()               {}
func (*PingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PingResponse) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

type ThemeResponse struct {
	SmallLogoName string `protobuf:"bytes,1,opt,name=SmallLogoName" json:"SmallLogoName,omitempty"`
	FavIconName   string `protobuf:"bytes,2,opt,name=FavIconName" json:"FavIconName,omitempty"`
	HeaderText    string `protobuf:"bytes,3,opt,name=HeaderText" json:"HeaderText,omitempty"`
	CorporateCss  string `protobuf:"bytes,4,opt,name=CorporateCss" json:"CorporateCss,omitempty"`
}

func (m *ThemeResponse) Reset()                    { *m = ThemeResponse{} }
func (m *ThemeResponse) String() string            { return proto.CompactTextString(m) }
func (*ThemeResponse) ProtoMessage()               {}
func (*ThemeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ThemeResponse) GetSmallLogoName() string {
	if m != nil {
		return m.SmallLogoName
	}
	return ""
}

func (m *ThemeResponse) GetFavIconName() string {
	if m != nil {
		return m.FavIconName
	}
	return ""
}

func (m *ThemeResponse) GetHeaderText() string {
	if m != nil {
		return m.HeaderText
	}
	return ""
}

func (m *ThemeResponse) GetCorporateCss() string {
	if m != nil {
		return m.CorporateCss
	}
	return ""
}

type HostThemeRequest struct {
	Host string `protobuf:"bytes,1,opt,name=Host" json:"Host,omitempty"`
}

func (m *HostThemeRequest) Reset()                    { *m = HostThemeRequest{} }
func (m *HostThemeRequest) String() string            { return proto.CompactTextString(m) }
func (*HostThemeRequest) ProtoMessage()               {}
func (*HostThemeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *HostThemeRequest) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func init() {
	proto.RegisterType((*PingResponse)(nil), "themes.PingResponse")
	proto.RegisterType((*ThemeResponse)(nil), "themes.ThemeResponse")
	proto.RegisterType((*HostThemeRequest)(nil), "themes.HostThemeRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Themes service

type ThemesClient interface {
	// comment: rpc ping
	Ping(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*PingResponse, error)
	// DEPRECATED
	GetHTMLTheme(ctx context.Context, in *h2gproxy.ServeRequest, opts ...grpc.CallOption) (*ThemeResponse, error)
	// get some defaults for a given webrequest. this proto is expected to grow
	GetThemeByHost(ctx context.Context, in *HostThemeRequest, opts ...grpc.CallOption) (*ThemeResponse, error)
}

type themesClient struct {
	cc *grpc.ClientConn
}

func NewThemesClient(cc *grpc.ClientConn) ThemesClient {
	return &themesClient{cc}
}

func (c *themesClient) Ping(ctx context.Context, in *common.Void, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := grpc.Invoke(ctx, "/themes.Themes/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *themesClient) GetHTMLTheme(ctx context.Context, in *h2gproxy.ServeRequest, opts ...grpc.CallOption) (*ThemeResponse, error) {
	out := new(ThemeResponse)
	err := grpc.Invoke(ctx, "/themes.Themes/GetHTMLTheme", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *themesClient) GetThemeByHost(ctx context.Context, in *HostThemeRequest, opts ...grpc.CallOption) (*ThemeResponse, error) {
	out := new(ThemeResponse)
	err := grpc.Invoke(ctx, "/themes.Themes/GetThemeByHost", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Themes service

type ThemesServer interface {
	// comment: rpc ping
	Ping(context.Context, *common.Void) (*PingResponse, error)
	// DEPRECATED
	GetHTMLTheme(context.Context, *h2gproxy.ServeRequest) (*ThemeResponse, error)
	// get some defaults for a given webrequest. this proto is expected to grow
	GetThemeByHost(context.Context, *HostThemeRequest) (*ThemeResponse, error)
}

func RegisterThemesServer(s *grpc.Server, srv ThemesServer) {
	s.RegisterService(&_Themes_serviceDesc, srv)
}

func _Themes_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThemesServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/themes.Themes/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThemesServer).Ping(ctx, req.(*common.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Themes_GetHTMLTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(h2gproxy.ServeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThemesServer).GetHTMLTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/themes.Themes/GetHTMLTheme",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThemesServer).GetHTMLTheme(ctx, req.(*h2gproxy.ServeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Themes_GetThemeByHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HostThemeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThemesServer).GetThemeByHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/themes.Themes/GetThemeByHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThemesServer).GetThemeByHost(ctx, req.(*HostThemeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Themes_serviceDesc = grpc.ServiceDesc{
	ServiceName: "themes.Themes",
	HandlerType: (*ThemesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Themes_Ping_Handler,
		},
		{
			MethodName: "GetHTMLTheme",
			Handler:    _Themes_GetHTMLTheme_Handler,
		},
		{
			MethodName: "GetThemeByHost",
			Handler:    _Themes_GetThemeByHost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/golang.conradwood.net/apis/themes/themes.proto",
}

func init() {
	proto.RegisterFile("protos/golang.conradwood.net/apis/themes/themes.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 332 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x91, 0x5f, 0x4b, 0xc3, 0x30,
	0x14, 0xc5, 0xa9, 0x8e, 0xa1, 0xd7, 0x4e, 0x24, 0xa8, 0x94, 0x22, 0x32, 0x8a, 0x88, 0xec, 0x21,
	0x83, 0x89, 0x8f, 0x3e, 0xb8, 0x81, 0x9b, 0x30, 0x45, 0xb6, 0xe1, 0x7b, 0x5c, 0x2f, 0xdd, 0x60,
	0xcd, 0xad, 0x49, 0x9c, 0xdb, 0x67, 0xf1, 0x7b, 0xf8, 0xf9, 0xa4, 0xe9, 0x1f, 0x5a, 0xc1, 0x3d,
	0xe5, 0xe6, 0xf0, 0x3b, 0xed, 0xc9, 0x3d, 0x70, 0x97, 0x28, 0x32, 0xa4, 0xbb, 0x11, 0xad, 0x84,
	0x8c, 0xf8, 0x9c, 0xa4, 0x12, 0xe1, 0x17, 0x51, 0xc8, 0x25, 0x9a, 0xae, 0x48, 0x96, 0xba, 0x6b,
	0x16, 0x18, 0x63, 0x71, 0x70, 0xcb, 0xb3, 0x66, 0x76, 0xf3, 0xf9, 0x0e, 0xdf, 0x9c, 0xe2, 0x98,
	0x64, 0x7e, 0x64, 0x3e, 0xbf, 0xb7, 0x83, 0x5f, 0xf4, 0xa2, 0x44, 0xd1, 0x66, 0x5b, 0x0e, 0x99,
	0x27, 0xe8, 0x80, 0xfb, 0xba, 0x94, 0xd1, 0x04, 0x75, 0x42, 0x52, 0x23, 0xf3, 0xe1, 0xa0, 0x98,
	0x3d, 0xa7, 0xed, 0xdc, 0x1c, 0x4e, 0xca, 0x7b, 0xf0, 0xed, 0x40, 0x6b, 0x96, 0x46, 0x2b, 0xe9,
	0x2b, 0x68, 0x4d, 0x63, 0xb1, 0x5a, 0x8d, 0x29, 0xa2, 0x17, 0x11, 0x17, 0x96, 0xba, 0xc8, 0xda,
	0x70, 0xf4, 0x28, 0xd6, 0x4f, 0x73, 0x92, 0x96, 0xd9, 0xb3, 0x4c, 0x55, 0x62, 0x97, 0x00, 0x23,
	0x14, 0x21, 0xaa, 0x19, 0x6e, 0x8c, 0xb7, 0x6f, 0x81, 0x8a, 0xc2, 0x02, 0x70, 0x07, 0xa4, 0x12,
	0x52, 0xc2, 0xe0, 0x40, 0x6b, 0xaf, 0x61, 0x89, 0x9a, 0x16, 0x5c, 0xc3, 0xc9, 0x88, 0xb4, 0xc9,
	0x03, 0x7e, 0x7c, 0xa2, 0x36, 0x8c, 0x41, 0x23, 0xd5, 0xf2, 0x58, 0x76, 0xee, 0xfd, 0x38, 0xd0,
	0xb4, 0x90, 0x66, 0x1d, 0x68, 0xa4, 0x8f, 0x67, 0x2e, 0xcf, 0xf7, 0xf8, 0x46, 0xcb, 0xd0, 0x3f,
	0xe5, 0x79, 0x1b, 0xb5, 0xc5, 0xdc, 0x83, 0x3b, 0x44, 0x33, 0x9a, 0x3d, 0x8f, 0xad, 0x99, 0x9d,
	0xf3, 0x72, 0x93, 0x53, 0x54, 0xeb, 0xe2, 0x97, 0xfe, 0x59, 0xe1, 0xae, 0x6f, 0xea, 0x01, 0x8e,
	0x87, 0x98, 0x85, 0xeb, 0x6f, 0xd3, 0x1c, 0xcc, 0x2b, 0xc0, 0xbf, 0xa9, 0xff, 0xf9, 0x44, 0xff,
	0x02, 0x7c, 0x89, 0xa6, 0xda, 0x6e, 0xda, 0x6c, 0xce, 0xbe, 0x37, 0x6d, 0x9f, 0xb7, 0xbf, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xad, 0x99, 0xbc, 0x16, 0x74, 0x02, 0x00, 0x00,
}
