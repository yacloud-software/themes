// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/email/email.proto
// DO NOT EDIT!

/*
Package email is a generated protocol buffer package.

It is generated from these files:
	golang.conradwood.net/apis/email/email.proto

It has these top-level messages:
	SendEmailRequest
	SendResponse
	TemplateEmailRequest
	TemplateEmailResponse
*/
package email

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SendEmailRequest struct {
	Sender    string `protobuf:"bytes,1,opt,name=Sender" json:"Sender,omitempty"`
	Recipient string `protobuf:"bytes,2,opt,name=Recipient" json:"Recipient,omitempty"`
	Subject   string `protobuf:"bytes,3,opt,name=Subject" json:"Subject,omitempty"`
	TextBody  string `protobuf:"bytes,4,opt,name=TextBody" json:"TextBody,omitempty"`
}

func (m *SendEmailRequest) Reset()                    { *m = SendEmailRequest{} }
func (m *SendEmailRequest) String() string            { return proto.CompactTextString(m) }
func (*SendEmailRequest) ProtoMessage()               {}
func (*SendEmailRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SendEmailRequest) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *SendEmailRequest) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *SendEmailRequest) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *SendEmailRequest) GetTextBody() string {
	if m != nil {
		return m.TextBody
	}
	return ""
}

type SendResponse struct {
	Success bool `protobuf:"varint,1,opt,name=Success" json:"Success,omitempty"`
}

func (m *SendResponse) Reset()                    { *m = SendResponse{} }
func (m *SendResponse) String() string            { return proto.CompactTextString(m) }
func (*SendResponse) ProtoMessage()               {}
func (*SendResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SendResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type TemplateEmailRequest struct {
	Sender       string            `protobuf:"bytes,1,opt,name=Sender" json:"Sender,omitempty"`
	Recipient    string            `protobuf:"bytes,2,opt,name=Recipient" json:"Recipient,omitempty"`
	TemplateName string            `protobuf:"bytes,3,opt,name=TemplateName" json:"TemplateName,omitempty"`
	Values       map[string]string `protobuf:"bytes,4,rep,name=Values" json:"Values,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *TemplateEmailRequest) Reset()                    { *m = TemplateEmailRequest{} }
func (m *TemplateEmailRequest) String() string            { return proto.CompactTextString(m) }
func (*TemplateEmailRequest) ProtoMessage()               {}
func (*TemplateEmailRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TemplateEmailRequest) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *TemplateEmailRequest) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *TemplateEmailRequest) GetTemplateName() string {
	if m != nil {
		return m.TemplateName
	}
	return ""
}

func (m *TemplateEmailRequest) GetValues() map[string]string {
	if m != nil {
		return m.Values
	}
	return nil
}

type TemplateEmailResponse struct {
	Success  bool   `protobuf:"varint,1,opt,name=Success" json:"Success,omitempty"`
	Subject  string `protobuf:"bytes,2,opt,name=Subject" json:"Subject,omitempty"`
	TextBody string `protobuf:"bytes,3,opt,name=TextBody" json:"TextBody,omitempty"`
	TextHTML string `protobuf:"bytes,4,opt,name=TextHTML" json:"TextHTML,omitempty"`
}

func (m *TemplateEmailResponse) Reset()                    { *m = TemplateEmailResponse{} }
func (m *TemplateEmailResponse) String() string            { return proto.CompactTextString(m) }
func (*TemplateEmailResponse) ProtoMessage()               {}
func (*TemplateEmailResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TemplateEmailResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *TemplateEmailResponse) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *TemplateEmailResponse) GetTextBody() string {
	if m != nil {
		return m.TextBody
	}
	return ""
}

func (m *TemplateEmailResponse) GetTextHTML() string {
	if m != nil {
		return m.TextHTML
	}
	return ""
}

func init() {
	proto.RegisterType((*SendEmailRequest)(nil), "email.SendEmailRequest")
	proto.RegisterType((*SendResponse)(nil), "email.SendResponse")
	proto.RegisterType((*TemplateEmailRequest)(nil), "email.TemplateEmailRequest")
	proto.RegisterType((*TemplateEmailResponse)(nil), "email.TemplateEmailResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EmailService service

type EmailServiceClient interface {
	// send a free-form (pre-rendered) email
	Send(ctx context.Context, in *SendEmailRequest, opts ...grpc.CallOption) (*SendResponse, error)
	// send a templated email
	SendTemplate(ctx context.Context, in *TemplateEmailRequest, opts ...grpc.CallOption) (*TemplateEmailResponse, error)
}

type emailServiceClient struct {
	cc *grpc.ClientConn
}

func NewEmailServiceClient(cc *grpc.ClientConn) EmailServiceClient {
	return &emailServiceClient{cc}
}

func (c *emailServiceClient) Send(ctx context.Context, in *SendEmailRequest, opts ...grpc.CallOption) (*SendResponse, error) {
	out := new(SendResponse)
	err := grpc.Invoke(ctx, "/email.EmailService/Send", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emailServiceClient) SendTemplate(ctx context.Context, in *TemplateEmailRequest, opts ...grpc.CallOption) (*TemplateEmailResponse, error) {
	out := new(TemplateEmailResponse)
	err := grpc.Invoke(ctx, "/email.EmailService/SendTemplate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EmailService service

type EmailServiceServer interface {
	// send a free-form (pre-rendered) email
	Send(context.Context, *SendEmailRequest) (*SendResponse, error)
	// send a templated email
	SendTemplate(context.Context, *TemplateEmailRequest) (*TemplateEmailResponse, error)
}

func RegisterEmailServiceServer(s *grpc.Server, srv EmailServiceServer) {
	s.RegisterService(&_EmailService_serviceDesc, srv)
}

func _EmailService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/email.EmailService/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).Send(ctx, req.(*SendEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmailService_SendTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TemplateEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmailServiceServer).SendTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/email.EmailService/SendTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmailServiceServer).SendTemplate(ctx, req.(*TemplateEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EmailService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "email.EmailService",
	HandlerType: (*EmailServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _EmailService_Send_Handler,
		},
		{
			MethodName: "SendTemplate",
			Handler:    _EmailService_SendTemplate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.conradwood.net/apis/email/email.proto",
}

func init() { proto.RegisterFile("golang.conradwood.net/apis/email/email.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 371 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x52, 0x4f, 0x4f, 0xfa, 0x40,
	0x10, 0x4d, 0x29, 0xf0, 0x83, 0x81, 0x03, 0xd9, 0x1f, 0x6a, 0x53, 0x39, 0x90, 0x5e, 0xe4, 0x60,
	0x4a, 0x82, 0x1e, 0xd4, 0x8b, 0x09, 0x09, 0x89, 0x26, 0xea, 0xa1, 0x10, 0xef, 0xa5, 0x9d, 0x90,
	0x6a, 0xd9, 0xad, 0xed, 0x82, 0x72, 0xf1, 0xe2, 0x07, 0xf0, 0x8b, 0xfa, 0x21, 0xcc, 0xfe, 0x29,
	0x16, 0x82, 0x7a, 0xf1, 0xd2, 0xf4, 0xcd, 0xdb, 0x9d, 0x79, 0x3b, 0xef, 0xc1, 0xf1, 0x8c, 0xc5,
	0x3e, 0x9d, 0xb9, 0x01, 0xa3, 0xa9, 0x1f, 0x3e, 0x33, 0x16, 0xba, 0x14, 0x79, 0xdf, 0x4f, 0xa2,
	0xac, 0x8f, 0x73, 0x3f, 0x8a, 0xd5, 0xd7, 0x4d, 0x52, 0xc6, 0x19, 0xa9, 0x48, 0xe0, 0xbc, 0x42,
	0x6b, 0x8c, 0x34, 0x1c, 0x09, 0xe0, 0xe1, 0xd3, 0x02, 0x33, 0x4e, 0xf6, 0xa1, 0x2a, 0x6a, 0x98,
	0x5a, 0x46, 0xd7, 0xe8, 0xd5, 0x3d, 0x8d, 0x48, 0x07, 0xea, 0x1e, 0x06, 0x51, 0x12, 0x21, 0xe5,
	0x56, 0x49, 0x52, 0x5f, 0x05, 0x62, 0xc1, 0xbf, 0xf1, 0x62, 0xfa, 0x80, 0x01, 0xb7, 0x4c, 0xc9,
	0xe5, 0x90, 0xd8, 0x50, 0x9b, 0xe0, 0x0b, 0x1f, 0xb2, 0x70, 0x65, 0x95, 0x25, 0xb5, 0xc6, 0x4e,
	0x0f, 0x9a, 0xa2, 0xbb, 0x87, 0x59, 0xc2, 0x68, 0x86, 0xaa, 0x4b, 0x10, 0x60, 0x96, 0xc9, 0xe1,
	0x35, 0x2f, 0x87, 0xce, 0x87, 0x01, 0xed, 0x09, 0xce, 0x93, 0xd8, 0xe7, 0xf8, 0x07, 0x72, 0x1d,
	0x68, 0xe6, 0xdd, 0xee, 0xfc, 0x39, 0x6a, 0xcd, 0x1b, 0x35, 0x72, 0x09, 0xd5, 0x7b, 0x3f, 0x5e,
	0x60, 0x66, 0x95, 0xbb, 0x66, 0xaf, 0x31, 0x38, 0x72, 0xd5, 0x06, 0x77, 0xc9, 0x70, 0xd5, 0xc9,
	0x11, 0xe5, 0xe9, 0xca, 0xd3, 0xd7, 0xec, 0x73, 0x68, 0x14, 0xca, 0xa4, 0x05, 0xe6, 0x23, 0xae,
	0xb4, 0x4c, 0xf1, 0x4b, 0xda, 0x50, 0x59, 0x8a, 0x03, 0x5a, 0x9f, 0x02, 0x17, 0xa5, 0x33, 0xc3,
	0x79, 0x33, 0x60, 0x6f, 0x6b, 0xce, 0x6f, 0x2b, 0x2a, 0x5a, 0x50, 0xfa, 0xde, 0x02, 0x73, 0xd3,
	0x82, 0x9c, 0xbb, 0x9a, 0xdc, 0xde, 0x14, 0xed, 0x11, 0x78, 0xf0, 0x6e, 0x40, 0x53, 0x4e, 0x1f,
	0x63, 0xba, 0x8c, 0x02, 0x24, 0xa7, 0x50, 0x16, 0xeb, 0x25, 0x07, 0x7a, 0x15, 0xdb, 0xe1, 0xb1,
	0xff, 0x17, 0x88, 0xb5, 0xe4, 0x6b, 0xe5, 0x72, 0xfe, 0x1e, 0x72, 0xf8, 0xc3, 0x22, 0xed, 0xce,
	0x6e, 0x52, 0xb5, 0x1a, 0x3a, 0xd0, 0xa5, 0xc8, 0x8b, 0x21, 0xd7, 0xb1, 0x17, 0x39, 0x57, 0x37,
	0xa7, 0x55, 0x19, 0xf1, 0x93, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbb, 0x32, 0x3a, 0xd1, 0x12,
	0x03, 0x00, 0x00,
}
