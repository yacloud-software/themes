// Code generated by protoc-gen-go.
// source: golang.conradwood.net/apis/auth/auth.proto
// DO NOT EDIT!

package auth

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type AuthResponse struct {
	Valid         bool   `protobuf:"varint,1,opt,name=Valid" json:"Valid,omitempty"`
	PublicMessage string `protobuf:"bytes,2,opt,name=PublicMessage" json:"PublicMessage,omitempty"`
	LogMessage    string `protobuf:"bytes,3,opt,name=LogMessage" json:"LogMessage,omitempty"`
	User          *User  `protobuf:"bytes,4,opt,name=User" json:"User,omitempty"`
	Token         string `protobuf:"bytes,5,opt,name=Token" json:"Token,omitempty"`
}

func (m *AuthResponse) Reset()                    { *m = AuthResponse{} }
func (m *AuthResponse) String() string            { return proto.CompactTextString(m) }
func (*AuthResponse) ProtoMessage()               {}
func (*AuthResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *AuthResponse) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func (m *AuthResponse) GetPublicMessage() string {
	if m != nil {
		return m.PublicMessage
	}
	return ""
}

func (m *AuthResponse) GetLogMessage() string {
	if m != nil {
		return m.LogMessage
	}
	return ""
}

func (m *AuthResponse) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *AuthResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

//
// this message is cryptographically signed.
// Adding/removing fields must be done carefully so that the signature matches all fields.
// It also makes backwards compatibility difficult.
// read the code in auth-service/.../authbe/sign.go and go-easyops/.../auth/sign_verify.go
type User struct {
	ID             string   `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Email          string   `protobuf:"bytes,2,opt,name=Email" json:"Email,omitempty"`
	FirstName      string   `protobuf:"bytes,3,opt,name=FirstName" json:"FirstName,omitempty"`
	LastName       string   `protobuf:"bytes,4,opt,name=LastName" json:"LastName,omitempty"`
	Password       string   `protobuf:"bytes,5,opt,name=Password" json:"Password,omitempty"`
	Groups         []*Group `protobuf:"bytes,6,rep,name=Groups" json:"Groups,omitempty"`
	Abbrev         string   `protobuf:"bytes,7,opt,name=Abbrev" json:"Abbrev,omitempty"`
	Active         bool     `protobuf:"varint,8,opt,name=Active" json:"Active,omitempty"`
	ServiceAccount bool     `protobuf:"varint,9,opt,name=ServiceAccount" json:"ServiceAccount,omitempty"`
	EmailVerified  bool     `protobuf:"varint,10,opt,name=EmailVerified" json:"EmailVerified,omitempty"`
	//
	// 0:not signed, otherwise version:
	// Version 2: ed25519 over ID, Email, FirstName, LastName, Active,Abbrev, GroupIDs, ServiceAccount, EmailVerified
	SignatureVersion uint32 `protobuf:"varint,11,opt,name=SignatureVersion" json:"SignatureVersion,omitempty"`
	SignedAt         uint32 `protobuf:"varint,12,opt,name=SignedAt" json:"SignedAt,omitempty"`
	SignatureID      []byte `protobuf:"bytes,13,opt,name=SignatureID,proto3" json:"SignatureID,omitempty"`
	SignatureFull    []byte `protobuf:"bytes,14,opt,name=SignatureFull,proto3" json:"SignatureFull,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *User) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *User) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *User) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *User) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *User) GetAbbrev() string {
	if m != nil {
		return m.Abbrev
	}
	return ""
}

func (m *User) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *User) GetServiceAccount() bool {
	if m != nil {
		return m.ServiceAccount
	}
	return false
}

func (m *User) GetEmailVerified() bool {
	if m != nil {
		return m.EmailVerified
	}
	return false
}

func (m *User) GetSignatureVersion() uint32 {
	if m != nil {
		return m.SignatureVersion
	}
	return 0
}

func (m *User) GetSignedAt() uint32 {
	if m != nil {
		return m.SignedAt
	}
	return 0
}

func (m *User) GetSignatureID() []byte {
	if m != nil {
		return m.SignatureID
	}
	return nil
}

func (m *User) GetSignatureFull() []byte {
	if m != nil {
		return m.SignatureFull
	}
	return nil
}

type Group struct {
	ID   string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	// a free text field describing the usage of this group
	Description string `protobuf:"bytes,3,opt,name=Description" json:"Description,omitempty"`
}

func (m *Group) Reset()                    { *m = Group{} }
func (m *Group) String() string            { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()               {}
func (*Group) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *Group) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Group) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Group) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type GroupList struct {
	Groups []*Group `protobuf:"bytes,1,rep,name=Groups" json:"Groups,omitempty"`
}

func (m *GroupList) Reset()                    { *m = GroupList{} }
func (m *GroupList) String() string            { return proto.CompactTextString(m) }
func (*GroupList) ProtoMessage()               {}
func (*GroupList) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *GroupList) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

type AddToGroupRequest struct {
	UserID  string `protobuf:"bytes,1,opt,name=UserID" json:"UserID,omitempty"`
	GroupID string `protobuf:"bytes,2,opt,name=GroupID" json:"GroupID,omitempty"`
}

func (m *AddToGroupRequest) Reset()                    { *m = AddToGroupRequest{} }
func (m *AddToGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*AddToGroupRequest) ProtoMessage()               {}
func (*AddToGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *AddToGroupRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *AddToGroupRequest) GetGroupID() string {
	if m != nil {
		return m.GroupID
	}
	return ""
}

type RemoveFromGroupRequest struct {
	UserID  string `protobuf:"bytes,1,opt,name=UserID" json:"UserID,omitempty"`
	GroupID string `protobuf:"bytes,2,opt,name=GroupID" json:"GroupID,omitempty"`
}

func (m *RemoveFromGroupRequest) Reset()                    { *m = RemoveFromGroupRequest{} }
func (m *RemoveFromGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveFromGroupRequest) ProtoMessage()               {}
func (*RemoveFromGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *RemoveFromGroupRequest) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *RemoveFromGroupRequest) GetGroupID() string {
	if m != nil {
		return m.GroupID
	}
	return ""
}

type ListGroupRequest struct {
	GroupID              string `protobuf:"bytes,1,opt,name=GroupID" json:"GroupID,omitempty"`
	IncludeInactiveUsers bool   `protobuf:"varint,2,opt,name=IncludeInactiveUsers" json:"IncludeInactiveUsers,omitempty"`
}

func (m *ListGroupRequest) Reset()                    { *m = ListGroupRequest{} }
func (m *ListGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*ListGroupRequest) ProtoMessage()               {}
func (*ListGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *ListGroupRequest) GetGroupID() string {
	if m != nil {
		return m.GroupID
	}
	return ""
}

func (m *ListGroupRequest) GetIncludeInactiveUsers() bool {
	if m != nil {
		return m.IncludeInactiveUsers
	}
	return false
}

type UserListResponse struct {
	Users []*User `protobuf:"bytes,1,rep,name=Users" json:"Users,omitempty"`
}

func (m *UserListResponse) Reset()                    { *m = UserListResponse{} }
func (m *UserListResponse) String() string            { return proto.CompactTextString(m) }
func (*UserListResponse) ProtoMessage()               {}
func (*UserListResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *UserListResponse) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func init() {
	proto.RegisterType((*AuthResponse)(nil), "auth.AuthResponse")
	proto.RegisterType((*User)(nil), "auth.User")
	proto.RegisterType((*Group)(nil), "auth.Group")
	proto.RegisterType((*GroupList)(nil), "auth.GroupList")
	proto.RegisterType((*AddToGroupRequest)(nil), "auth.AddToGroupRequest")
	proto.RegisterType((*RemoveFromGroupRequest)(nil), "auth.RemoveFromGroupRequest")
	proto.RegisterType((*ListGroupRequest)(nil), "auth.ListGroupRequest")
	proto.RegisterType((*UserListResponse)(nil), "auth.UserListResponse")
}

func init() { proto.RegisterFile("golang.conradwood.net/apis/auth/auth.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 548 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x54, 0x51, 0x6e, 0xd3, 0x40,
	0x10, 0x95, 0xdb, 0x24, 0x4d, 0x26, 0x6d, 0x14, 0x56, 0x55, 0xb5, 0x42, 0xa8, 0x18, 0x83, 0x90,
	0xd5, 0x8f, 0x14, 0x05, 0x2e, 0x10, 0x94, 0x06, 0x19, 0xa5, 0xa8, 0x72, 0x4b, 0xbe, 0xd9, 0xd8,
	0x43, 0xba, 0xc2, 0xf1, 0x86, 0xdd, 0x75, 0x7a, 0x1d, 0x2e, 0xc1, 0xfd, 0xd0, 0x8e, 0x1d, 0xe3,
	0x50, 0xf8, 0xe2, 0xc7, 0xda, 0xf7, 0xe6, 0xed, 0xcc, 0xf3, 0x8c, 0x3d, 0x70, 0xb1, 0x52, 0x99,
	0xc8, 0x57, 0xa3, 0x44, 0xe5, 0x5a, 0xa4, 0x0f, 0x4a, 0xa5, 0xa3, 0x1c, 0xed, 0xa5, 0xd8, 0x48,
	0x73, 0x29, 0x0a, 0x7b, 0x4f, 0x8f, 0xd1, 0x46, 0x2b, 0xab, 0x58, 0xcb, 0x9d, 0x83, 0x1f, 0x1e,
	0x1c, 0x4f, 0x0a, 0x7b, 0x1f, 0xa3, 0xd9, 0xa8, 0xdc, 0x20, 0x3b, 0x85, 0xf6, 0x42, 0x64, 0x32,
	0xe5, 0x9e, 0xef, 0x85, 0xdd, 0xb8, 0x04, 0xec, 0x15, 0x9c, 0xdc, 0x14, 0xcb, 0x4c, 0x26, 0xd7,
	0x68, 0x8c, 0x58, 0x21, 0x3f, 0xf0, 0xbd, 0xb0, 0x17, 0xef, 0x93, 0xec, 0x1c, 0x60, 0xae, 0x56,
	0x3b, 0xc9, 0x21, 0x49, 0x1a, 0x0c, 0x3b, 0x87, 0xd6, 0x67, 0x83, 0x9a, 0xb7, 0x7c, 0x2f, 0xec,
	0x8f, 0x61, 0x44, 0x6e, 0x1c, 0x13, 0x13, 0xef, 0x6a, 0xdf, 0xa9, 0x6f, 0x98, 0xf3, 0x36, 0x5d,
	0x2d, 0x41, 0xf0, 0xf3, 0xb0, 0xbc, 0xc6, 0x06, 0x70, 0x10, 0x4d, 0xc9, 0x57, 0x2f, 0x3e, 0x88,
	0xa6, 0x4e, 0x7e, 0xb5, 0x16, 0x32, 0xab, 0xcc, 0x94, 0x80, 0x3d, 0x83, 0xde, 0x4c, 0x6a, 0x63,
	0x3f, 0x89, 0xf5, 0xce, 0xc3, 0x6f, 0x82, 0x3d, 0x85, 0xee, 0x5c, 0x54, 0xc1, 0x16, 0x05, 0x6b,
	0xec, 0x62, 0x37, 0xc2, 0x98, 0x07, 0xa5, 0xd3, 0xca, 0x41, 0x8d, 0xd9, 0x4b, 0xe8, 0x7c, 0xd0,
	0xaa, 0xd8, 0x18, 0xde, 0xf1, 0x0f, 0xc3, 0xfe, 0xb8, 0x5f, 0x9a, 0x27, 0x2e, 0xae, 0x42, 0xec,
	0x0c, 0x3a, 0x93, 0xe5, 0x52, 0xe3, 0x96, 0x1f, 0xd1, 0xf5, 0x0a, 0x11, 0x9f, 0x58, 0xb9, 0x45,
	0xde, 0xa5, 0xa6, 0x56, 0x88, 0xbd, 0x86, 0xc1, 0x2d, 0xea, 0xad, 0x4c, 0x70, 0x92, 0x24, 0xaa,
	0xc8, 0x2d, 0xef, 0x51, 0xfc, 0x0f, 0xd6, 0x75, 0x9f, 0xde, 0x6d, 0x81, 0x5a, 0x7e, 0x95, 0x98,
	0x72, 0x20, 0xd9, 0x3e, 0xc9, 0x2e, 0x60, 0x78, 0x2b, 0x57, 0xb9, 0xb0, 0x85, 0xc6, 0x05, 0x6a,
	0x23, 0x55, 0xce, 0xfb, 0xbe, 0x17, 0x9e, 0xc4, 0x8f, 0x78, 0xf7, 0xaa, 0x8e, 0xc3, 0x74, 0x62,
	0xf9, 0x31, 0x69, 0x6a, 0xcc, 0x7c, 0xe8, 0xd7, 0xfa, 0x68, 0xca, 0x4f, 0x7c, 0x2f, 0x3c, 0x8e,
	0x9b, 0x94, 0xf3, 0x53, 0xc3, 0x59, 0x91, 0x65, 0x7c, 0x40, 0x9a, 0x7d, 0x32, 0xb8, 0x86, 0x36,
	0xf5, 0xe5, 0xd1, 0xdc, 0x18, 0xb4, 0xa8, 0xff, 0xe5, 0xd8, 0xe8, 0xec, 0x8a, 0x4e, 0xd1, 0x24,
	0x5a, 0x6e, 0xac, 0xf3, 0x5d, 0xce, 0xad, 0x49, 0x05, 0x6f, 0xa0, 0x47, 0xe9, 0xe6, 0xd2, 0xd8,
	0xc6, 0x38, 0xbc, 0x7f, 0x8e, 0x23, 0xb8, 0x82, 0x27, 0x93, 0x34, 0xbd, 0x53, 0x25, 0x8b, 0xdf,
	0x0b, 0x34, 0xd6, 0xcd, 0xc2, 0x7d, 0x4c, 0xb5, 0xa1, 0x0a, 0x31, 0x0e, 0x47, 0xa4, 0x8b, 0xa6,
	0x95, 0xaf, 0x1d, 0x0c, 0x3e, 0xc2, 0x59, 0x8c, 0x6b, 0xb5, 0xc5, 0x99, 0x56, 0xeb, 0xff, 0xcc,
	0xf5, 0x05, 0x86, 0xce, 0xff, 0x5e, 0x96, 0x86, 0xda, 0xdb, 0x53, 0xb3, 0x31, 0x9c, 0x46, 0x79,
	0x92, 0x15, 0x29, 0x46, 0xb9, 0xa0, 0x4f, 0xc6, 0x15, 0x30, 0x94, 0xb4, 0x1b, 0xff, 0x35, 0x16,
	0xbc, 0x83, 0xa1, 0x3b, 0xb8, 0x2a, 0xf5, 0x3f, 0xed, 0x43, 0xbb, 0xbc, 0x58, 0x36, 0xab, 0xf9,
	0xe3, 0x95, 0x81, 0xf7, 0x2f, 0xe0, 0x79, 0x8e, 0xb6, 0xb9, 0x37, 0xaa, 0x4d, 0xe2, 0x56, 0x07,
	0xc9, 0x97, 0x1d, 0x5a, 0x1b, 0x6f, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0x4f, 0x4f, 0xb7, 0x62,
	0x64, 0x04, 0x00, 0x00,
}
