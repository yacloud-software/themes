// Code generated by protoc-gen-go.
// source: golang.singingcat.net/apis/scapi/scapi.proto
// DO NOT EDIT!

/*
Package scapi is a generated protocol buffer package.

It is generated from these files:
	golang.singingcat.net/apis/scapi/scapi.proto

It has these top-level messages:
	PingRequest
	PingResponse
	ModuleNameUpdate
	SensorConfigUpdateRequest
*/
package scapi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import scweb "golang.singingcat.net/apis/scweb"
import scfunctions "golang.singingcat.net/apis/scfunctions"
import common "golang.conradwood.net/apis/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// comment: message pingrequest
type PingRequest struct {
	// comment: payload
	Payload string `protobuf:"bytes,2,opt,name=Payload" json:"Payload,omitempty"`
	// comment: sequencenumber
	SequenceNumber uint32 `protobuf:"varint,1,opt,name=SequenceNumber" json:"SequenceNumber,omitempty"`
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PingRequest) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *PingRequest) GetSequenceNumber() uint32 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

// comment: message pingresponse
type PingResponse struct {
	// comment: field pingresponse.response
	Response *PingRequest `protobuf:"bytes,1,opt,name=Response" json:"Response,omitempty"`
}

func (m *PingResponse) Reset()                    { *m = PingResponse{} }
func (m *PingResponse) String() string            { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()               {}
func (*PingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PingResponse) GetResponse() *PingRequest {
	if m != nil {
		return m.Response
	}
	return nil
}

type ModuleNameUpdate struct {
	ModuleID uint64 `protobuf:"varint,1,opt,name=ModuleID" json:"ModuleID,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
}

func (m *ModuleNameUpdate) Reset()                    { *m = ModuleNameUpdate{} }
func (m *ModuleNameUpdate) String() string            { return proto.CompactTextString(m) }
func (*ModuleNameUpdate) ProtoMessage()               {}
func (*ModuleNameUpdate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ModuleNameUpdate) GetModuleID() uint64 {
	if m != nil {
		return m.ModuleID
	}
	return 0
}

func (m *ModuleNameUpdate) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type SensorConfigUpdateRequest struct {
	SensorDefID       uint64 `protobuf:"varint,1,opt,name=SensorDefID" json:"SensorDefID,omitempty"`
	Enable            bool   `protobuf:"varint,2,opt,name=Enable" json:"Enable,omitempty"`
	ReportingInterval uint32 `protobuf:"varint,3,opt,name=ReportingInterval" json:"ReportingInterval,omitempty"`
	PollingInterval   uint32 `protobuf:"varint,4,opt,name=PollingInterval" json:"PollingInterval,omitempty"`
	FriendlyName      string `protobuf:"bytes,5,opt,name=FriendlyName" json:"FriendlyName,omitempty"`
}

func (m *SensorConfigUpdateRequest) Reset()                    { *m = SensorConfigUpdateRequest{} }
func (m *SensorConfigUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*SensorConfigUpdateRequest) ProtoMessage()               {}
func (*SensorConfigUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SensorConfigUpdateRequest) GetSensorDefID() uint64 {
	if m != nil {
		return m.SensorDefID
	}
	return 0
}

func (m *SensorConfigUpdateRequest) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *SensorConfigUpdateRequest) GetReportingInterval() uint32 {
	if m != nil {
		return m.ReportingInterval
	}
	return 0
}

func (m *SensorConfigUpdateRequest) GetPollingInterval() uint32 {
	if m != nil {
		return m.PollingInterval
	}
	return 0
}

func (m *SensorConfigUpdateRequest) GetFriendlyName() string {
	if m != nil {
		return m.FriendlyName
	}
	return ""
}

func init() {
	proto.RegisterType((*PingRequest)(nil), "scapi.PingRequest")
	proto.RegisterType((*PingResponse)(nil), "scapi.PingResponse")
	proto.RegisterType((*ModuleNameUpdate)(nil), "scapi.ModuleNameUpdate")
	proto.RegisterType((*SensorConfigUpdateRequest)(nil), "scapi.SensorConfigUpdateRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SCApiService service

type SCApiServiceClient interface {
	// just ping the api
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	// update name of a module
	UpdateModuleName(ctx context.Context, in *ModuleNameUpdate, opts ...grpc.CallOption) (*common.Void, error)
	// update friendly name of sensor
	UpdateSensorName(ctx context.Context, in *scweb.SensorNameUpdate, opts ...grpc.CallOption) (*common.Void, error)
	// set a config flag
	SetConfigFlag(ctx context.Context, in *scfunctions.SetFlagRequest, opts ...grpc.CallOption) (*common.Void, error)
	// update sensor configuration
	UpdateSensorConfiguration(ctx context.Context, in *SensorConfigUpdateRequest, opts ...grpc.CallOption) (*common.Void, error)
}

type sCApiServiceClient struct {
	cc *grpc.ClientConn
}

func NewSCApiServiceClient(cc *grpc.ClientConn) SCApiServiceClient {
	return &sCApiServiceClient{cc}
}

func (c *sCApiServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := grpc.Invoke(ctx, "/scapi.SCApiService/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sCApiServiceClient) UpdateModuleName(ctx context.Context, in *ModuleNameUpdate, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/scapi.SCApiService/UpdateModuleName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sCApiServiceClient) UpdateSensorName(ctx context.Context, in *scweb.SensorNameUpdate, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/scapi.SCApiService/UpdateSensorName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sCApiServiceClient) SetConfigFlag(ctx context.Context, in *scfunctions.SetFlagRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/scapi.SCApiService/SetConfigFlag", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sCApiServiceClient) UpdateSensorConfiguration(ctx context.Context, in *SensorConfigUpdateRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/scapi.SCApiService/UpdateSensorConfiguration", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SCApiService service

type SCApiServiceServer interface {
	// just ping the api
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	// update name of a module
	UpdateModuleName(context.Context, *ModuleNameUpdate) (*common.Void, error)
	// update friendly name of sensor
	UpdateSensorName(context.Context, *scweb.SensorNameUpdate) (*common.Void, error)
	// set a config flag
	SetConfigFlag(context.Context, *scfunctions.SetFlagRequest) (*common.Void, error)
	// update sensor configuration
	UpdateSensorConfiguration(context.Context, *SensorConfigUpdateRequest) (*common.Void, error)
}

func RegisterSCApiServiceServer(s *grpc.Server, srv SCApiServiceServer) {
	s.RegisterService(&_SCApiService_serviceDesc, srv)
}

func _SCApiService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCApiServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scapi.SCApiService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCApiServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SCApiService_UpdateModuleName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModuleNameUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCApiServiceServer).UpdateModuleName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scapi.SCApiService/UpdateModuleName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCApiServiceServer).UpdateModuleName(ctx, req.(*ModuleNameUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _SCApiService_UpdateSensorName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(scweb.SensorNameUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCApiServiceServer).UpdateSensorName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scapi.SCApiService/UpdateSensorName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCApiServiceServer).UpdateSensorName(ctx, req.(*scweb.SensorNameUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _SCApiService_SetConfigFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(scfunctions.SetFlagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCApiServiceServer).SetConfigFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scapi.SCApiService/SetConfigFlag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCApiServiceServer).SetConfigFlag(ctx, req.(*scfunctions.SetFlagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SCApiService_UpdateSensorConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SensorConfigUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCApiServiceServer).UpdateSensorConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scapi.SCApiService/UpdateSensorConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCApiServiceServer).UpdateSensorConfiguration(ctx, req.(*SensorConfigUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SCApiService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scapi.SCApiService",
	HandlerType: (*SCApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _SCApiService_Ping_Handler,
		},
		{
			MethodName: "UpdateModuleName",
			Handler:    _SCApiService_UpdateModuleName_Handler,
		},
		{
			MethodName: "UpdateSensorName",
			Handler:    _SCApiService_UpdateSensorName_Handler,
		},
		{
			MethodName: "SetConfigFlag",
			Handler:    _SCApiService_SetConfigFlag_Handler,
		},
		{
			MethodName: "UpdateSensorConfiguration",
			Handler:    _SCApiService_UpdateSensorConfiguration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.singingcat.net/apis/scapi/scapi.proto",
}

func init() { proto.RegisterFile("golang.singingcat.net/apis/scapi/scapi.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 467 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x53, 0xd1, 0x6e, 0xd3, 0x30,
	0x14, 0x55, 0x47, 0x37, 0xca, 0x6d, 0x07, 0xc3, 0x48, 0xd0, 0x85, 0x97, 0x28, 0x0f, 0xa8, 0x0f,
	0x53, 0x2a, 0x8d, 0x17, 0xe0, 0x01, 0x89, 0x6d, 0x4c, 0x9a, 0x10, 0xa3, 0x4a, 0x04, 0xef, 0x6e,
	0x72, 0x1b, 0x59, 0x72, 0xaf, 0x83, 0xe3, 0x6c, 0xda, 0xcf, 0xf1, 0x0f, 0xfc, 0x11, 0x8a, 0xed,
	0x36, 0x49, 0xd9, 0xf6, 0x92, 0xf8, 0x1e, 0x9f, 0x73, 0x6c, 0x1f, 0xfb, 0xc2, 0x49, 0xa1, 0x24,
	0xa7, 0x22, 0xae, 0x04, 0x15, 0x82, 0x8a, 0x8c, 0x9b, 0x98, 0xd0, 0xcc, 0x79, 0x29, 0xaa, 0x79,
	0x95, 0xf1, 0x52, 0xb8, 0x6f, 0x5c, 0x6a, 0x65, 0x14, 0xdb, 0xb7, 0x45, 0xf0, 0xb8, 0xe8, 0x16,
	0x97, 0xee, 0xeb, 0x44, 0xc1, 0x87, 0x47, 0xd9, 0xab, 0x9a, 0x32, 0x23, 0x14, 0xf5, 0xc6, 0x5e,
	0x19, 0x7b, 0x65, 0xa6, 0x48, 0xf3, 0xfc, 0x56, 0xa9, 0xbc, 0x55, 0x66, 0x6a, 0xbd, 0x56, 0xe4,
	0x7f, 0x8e, 0x1f, 0xfd, 0x80, 0xf1, 0x42, 0x50, 0x91, 0xe0, 0xef, 0x1a, 0x2b, 0xc3, 0xa6, 0xf0,
	0x74, 0xc1, 0xef, 0xa4, 0xe2, 0xf9, 0x74, 0x2f, 0x1c, 0xcc, 0x9e, 0x25, 0x9b, 0x92, 0xbd, 0x83,
	0xe7, 0x69, 0x43, 0xa2, 0x0c, 0xaf, 0xeb, 0xf5, 0x12, 0xf5, 0x74, 0x10, 0x0e, 0x66, 0x87, 0xc9,
	0x0e, 0x1a, 0x7d, 0x86, 0x89, 0x33, 0xac, 0x4a, 0x45, 0x15, 0xb2, 0x18, 0x46, 0x9b, 0xb1, 0x55,
	0x8c, 0x4f, 0x59, 0xec, 0xf2, 0xe9, 0xac, 0x9b, 0x6c, 0x39, 0xd1, 0x19, 0x1c, 0x7d, 0x57, 0x79,
	0x2d, 0xf1, 0x9a, 0xaf, 0xf1, 0x67, 0x99, 0x73, 0x83, 0x2c, 0x80, 0x91, 0xc3, 0xae, 0x2e, 0xac,
	0xc7, 0x30, 0xd9, 0xd6, 0x8c, 0xc1, 0xb0, 0x61, 0xfa, 0xed, 0xda, 0x71, 0xf4, 0x77, 0x00, 0xc7,
	0x29, 0x52, 0xa5, 0xf4, 0xb9, 0xa2, 0x95, 0x28, 0x9c, 0xcd, 0xe6, 0x8c, 0x21, 0x8c, 0xdd, 0xe4,
	0x05, 0xae, 0xb6, 0x86, 0x5d, 0x88, 0xbd, 0x86, 0x83, 0xaf, 0xc4, 0x97, 0xd2, 0xb9, 0x8e, 0x12,
	0x5f, 0xb1, 0x13, 0x78, 0x99, 0x60, 0xa9, 0xb4, 0x11, 0x54, 0x5c, 0x91, 0x41, 0x7d, 0xc3, 0xe5,
	0xf4, 0x89, 0x8d, 0xe1, 0xff, 0x09, 0x36, 0x83, 0x17, 0x0b, 0x25, 0x65, 0x97, 0x3b, 0xb4, 0xdc,
	0x5d, 0x98, 0x45, 0x30, 0xb9, 0xd4, 0x02, 0x29, 0x97, 0x77, 0xf6, 0x2c, 0xfb, 0xf6, 0x2c, 0x3d,
	0xec, 0xf4, 0xcf, 0x1e, 0x4c, 0xd2, 0xf3, 0x2f, 0xa5, 0x48, 0x51, 0xdf, 0x88, 0x0c, 0xd9, 0x1c,
	0x86, 0x4d, 0x82, 0xec, 0x9e, 0x38, 0x83, 0x57, 0x3d, 0xcc, 0xdf, 0xc4, 0x47, 0x38, 0x72, 0x41,
	0xb4, 0xf9, 0xb2, 0x37, 0x9e, 0xb8, 0x1b, 0x79, 0x30, 0x89, 0xfd, 0x33, 0xf9, 0xa5, 0x44, 0xde,
	0x4a, 0x5d, 0x4a, 0x5b, 0x69, 0xf3, 0x62, 0x5b, 0xe8, 0x5e, 0xe9, 0x27, 0x38, 0x4c, 0xd1, 0xb8,
	0x7b, 0xb8, 0x94, 0xbc, 0x60, 0x6f, 0xe3, 0xee, 0xab, 0x4d, 0xd1, 0x34, 0xe8, 0x66, 0xe3, 0x7d,
	0xed, 0x37, 0x38, 0xee, 0x2e, 0xeb, 0x4c, 0x6a, 0xcd, 0x1b, 0x29, 0x0b, 0xfd, 0xd6, 0x1f, 0xbc,
	0xe8, 0xbe, 0xd9, 0x59, 0x04, 0x21, 0xa1, 0xe9, 0x36, 0x86, 0x6f, 0x95, 0xa6, 0x37, 0x9c, 0xd7,
	0xf2, 0xc0, 0x36, 0xc5, 0xfb, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xed, 0xfd, 0x3c, 0xe7, 0xe3,
	0x03, 0x00, 0x00,
}
