// Code generated by protoc-gen-go.
// source: golang.singingcat.net/apis/scweb/scweb.proto
// DO NOT EDIT!

/*
Package scweb is a generated protocol buffer package.

It is generated from these files:
	golang.singingcat.net/apis/scweb/scweb.proto

It has these top-level messages:
	RenderModule
	RenderSensor
	RenderModuleList
	NodeRef
	SensorRef
	Sensor
	SensorList
	RawToGoodSensorValueRequest
	GoodSensorValue
	SoftwareInfo
	ModuleStatus
	RenderModuleDetails
	SensorID
	UpdateWifiInfo
	SensorNameUpdate
	ModuleNameUpdate
	WifiFirmwareUpdate
	StoreConfigFlagsRequest
	ConfigFlags
	Text
	ByNameMatchResponse
	WifiInfo
	Module
	DBSensor
	SensorUnit
	SensorType
*/
package scweb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import base "golang.singingcat.net/apis/base"
import common "golang.conradwood.net/apis/common"
import auth "golang.conradwood.net/apis/auth"
import singingcat "golang.singingcat.net/apis/singingcat"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UpgradeStrategy int32

const (
	UpgradeStrategy_UNDEFINED   UpgradeStrategy = 0
	UpgradeStrategy_IMMEDIATELY UpgradeStrategy = 1
	UpgradeStrategy_NEVER       UpgradeStrategy = 2
)

var UpgradeStrategy_name = map[int32]string{
	0: "UNDEFINED",
	1: "IMMEDIATELY",
	2: "NEVER",
}
var UpgradeStrategy_value = map[string]int32{
	"UNDEFINED":   0,
	"IMMEDIATELY": 1,
	"NEVER":       2,
}

func (x UpgradeStrategy) String() string {
	return proto.EnumName(UpgradeStrategy_name, int32(x))
}
func (UpgradeStrategy) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type RenderModule struct {
	ID             uint64          `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	NodeID         string          `protobuf:"bytes,2,opt,name=NodeID" json:"NodeID,omitempty"`
	FriendlyName   string          `protobuf:"bytes,3,opt,name=FriendlyName" json:"FriendlyName,omitempty"`
	OnlineStatus   string          `protobuf:"bytes,4,opt,name=OnlineStatus" json:"OnlineStatus,omitempty"`
	AppBuildDate   string          `protobuf:"bytes,5,opt,name=AppBuildDate" json:"AppBuildDate,omitempty"`
	RunningApp     string          `protobuf:"bytes,6,opt,name=RunningApp" json:"RunningApp,omitempty"`
	InstalledApps  []string        `protobuf:"bytes,7,rep,name=InstalledApps" json:"InstalledApps,omitempty"`
	Sensors        []*RenderSensor `protobuf:"bytes,8,rep,name=Sensors" json:"Sensors,omitempty"`
	Owner          *auth.User      `protobuf:"bytes,9,opt,name=Owner" json:"Owner,omitempty"`
	OwnerEmail     string          `protobuf:"bytes,10,opt,name=OwnerEmail" json:"OwnerEmail,omitempty"`
	RepositoryName string          `protobuf:"bytes,11,opt,name=RepositoryName" json:"RepositoryName,omitempty"`
	RepositoryID   string          `protobuf:"bytes,12,opt,name=RepositoryID" json:"RepositoryID,omitempty"`
	LoaderVersion  string          `protobuf:"bytes,13,opt,name=LoaderVersion" json:"LoaderVersion,omitempty"`
	Online         bool            `protobuf:"varint,14,opt,name=Online" json:"Online,omitempty"`
}

func (m *RenderModule) Reset()                    { *m = RenderModule{} }
func (m *RenderModule) String() string            { return proto.CompactTextString(m) }
func (*RenderModule) ProtoMessage()               {}
func (*RenderModule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RenderModule) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *RenderModule) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

func (m *RenderModule) GetFriendlyName() string {
	if m != nil {
		return m.FriendlyName
	}
	return ""
}

func (m *RenderModule) GetOnlineStatus() string {
	if m != nil {
		return m.OnlineStatus
	}
	return ""
}

func (m *RenderModule) GetAppBuildDate() string {
	if m != nil {
		return m.AppBuildDate
	}
	return ""
}

func (m *RenderModule) GetRunningApp() string {
	if m != nil {
		return m.RunningApp
	}
	return ""
}

func (m *RenderModule) GetInstalledApps() []string {
	if m != nil {
		return m.InstalledApps
	}
	return nil
}

func (m *RenderModule) GetSensors() []*RenderSensor {
	if m != nil {
		return m.Sensors
	}
	return nil
}

func (m *RenderModule) GetOwner() *auth.User {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *RenderModule) GetOwnerEmail() string {
	if m != nil {
		return m.OwnerEmail
	}
	return ""
}

func (m *RenderModule) GetRepositoryName() string {
	if m != nil {
		return m.RepositoryName
	}
	return ""
}

func (m *RenderModule) GetRepositoryID() string {
	if m != nil {
		return m.RepositoryID
	}
	return ""
}

func (m *RenderModule) GetLoaderVersion() string {
	if m != nil {
		return m.LoaderVersion
	}
	return ""
}

func (m *RenderModule) GetOnline() bool {
	if m != nil {
		return m.Online
	}
	return false
}

type RenderSensor struct {
	ID           uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	FriendlyName string `protobuf:"bytes,2,opt,name=FriendlyName" json:"FriendlyName,omitempty"`
	Name         string `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
	Value        string `protobuf:"bytes,4,opt,name=Value" json:"Value,omitempty"`
	Timestamp    string `protobuf:"bytes,5,opt,name=Timestamp" json:"Timestamp,omitempty"`
	Enabled      bool   `protobuf:"varint,6,opt,name=Enabled" json:"Enabled,omitempty"`
}

func (m *RenderSensor) Reset()                    { *m = RenderSensor{} }
func (m *RenderSensor) String() string            { return proto.CompactTextString(m) }
func (*RenderSensor) ProtoMessage()               {}
func (*RenderSensor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RenderSensor) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *RenderSensor) GetFriendlyName() string {
	if m != nil {
		return m.FriendlyName
	}
	return ""
}

func (m *RenderSensor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RenderSensor) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *RenderSensor) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *RenderSensor) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

type RenderModuleList struct {
	Modules []*RenderModule `protobuf:"bytes,1,rep,name=Modules" json:"Modules,omitempty"`
}

func (m *RenderModuleList) Reset()                    { *m = RenderModuleList{} }
func (m *RenderModuleList) String() string            { return proto.CompactTextString(m) }
func (*RenderModuleList) ProtoMessage()               {}
func (*RenderModuleList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RenderModuleList) GetModules() []*RenderModule {
	if m != nil {
		return m.Modules
	}
	return nil
}

type NodeRef struct {
	NodeID uint32 `protobuf:"varint,1,opt,name=NodeID" json:"NodeID,omitempty"`
}

func (m *NodeRef) Reset()                    { *m = NodeRef{} }
func (m *NodeRef) String() string            { return proto.CompactTextString(m) }
func (*NodeRef) ProtoMessage()               {}
func (*NodeRef) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *NodeRef) GetNodeID() uint32 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

type SensorRef struct {
	NodeID uint32 `protobuf:"varint,1,opt,name=NodeID" json:"NodeID,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
}

func (m *SensorRef) Reset()                    { *m = SensorRef{} }
func (m *SensorRef) String() string            { return proto.CompactTextString(m) }
func (*SensorRef) ProtoMessage()               {}
func (*SensorRef) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SensorRef) GetNodeID() uint32 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *SensorRef) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Sensor struct {
	ID           uint64      `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	ModuleID     uint64      `protobuf:"varint,2,opt,name=ModuleID" json:"ModuleID,omitempty"`
	FriendlyName string      `protobuf:"bytes,3,opt,name=FriendlyName" json:"FriendlyName,omitempty"`
	Name         string      `protobuf:"bytes,4,opt,name=Name" json:"Name,omitempty"`
	Unit         *SensorUnit `protobuf:"bytes,5,opt,name=Unit" json:"Unit,omitempty"`
}

func (m *Sensor) Reset()                    { *m = Sensor{} }
func (m *Sensor) String() string            { return proto.CompactTextString(m) }
func (*Sensor) ProtoMessage()               {}
func (*Sensor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Sensor) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Sensor) GetModuleID() uint64 {
	if m != nil {
		return m.ModuleID
	}
	return 0
}

func (m *Sensor) GetFriendlyName() string {
	if m != nil {
		return m.FriendlyName
	}
	return ""
}

func (m *Sensor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Sensor) GetUnit() *SensorUnit {
	if m != nil {
		return m.Unit
	}
	return nil
}

type SensorList struct {
	Sensors []*Sensor `protobuf:"bytes,1,rep,name=Sensors" json:"Sensors,omitempty"`
}

func (m *SensorList) Reset()                    { *m = SensorList{} }
func (m *SensorList) String() string            { return proto.CompactTextString(m) }
func (*SensorList) ProtoMessage()               {}
func (*SensorList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SensorList) GetSensors() []*Sensor {
	if m != nil {
		return m.Sensors
	}
	return nil
}

type RawToGoodSensorValueRequest struct {
	SensorID uint64 `protobuf:"varint,1,opt,name=SensorID" json:"SensorID,omitempty"`
	Value    int64  `protobuf:"varint,2,opt,name=Value" json:"Value,omitempty"`
}

func (m *RawToGoodSensorValueRequest) Reset()                    { *m = RawToGoodSensorValueRequest{} }
func (m *RawToGoodSensorValueRequest) String() string            { return proto.CompactTextString(m) }
func (*RawToGoodSensorValueRequest) ProtoMessage()               {}
func (*RawToGoodSensorValueRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *RawToGoodSensorValueRequest) GetSensorID() uint64 {
	if m != nil {
		return m.SensorID
	}
	return 0
}

func (m *RawToGoodSensorValueRequest) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type GoodSensorValue struct {
	Sensor *Sensor `protobuf:"bytes,1,opt,name=Sensor" json:"Sensor,omitempty"`
	Value  float64 `protobuf:"fixed64,2,opt,name=Value" json:"Value,omitempty"`
}

func (m *GoodSensorValue) Reset()                    { *m = GoodSensorValue{} }
func (m *GoodSensorValue) String() string            { return proto.CompactTextString(m) }
func (*GoodSensorValue) ProtoMessage()               {}
func (*GoodSensorValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *GoodSensorValue) GetSensor() *Sensor {
	if m != nil {
		return m.Sensor
	}
	return nil
}

func (m *GoodSensorValue) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type SoftwareInfo struct {
	ActiveVersion uint32 `protobuf:"varint,1,opt,name=ActiveVersion" json:"ActiveVersion,omitempty"`
	BuildTime     uint32 `protobuf:"varint,2,opt,name=BuildTime" json:"BuildTime,omitempty"`
	BaseAddress   uint32 `protobuf:"varint,3,opt,name=BaseAddress" json:"BaseAddress,omitempty"`
	Repository    uint32 `protobuf:"varint,4,opt,name=Repository" json:"Repository,omitempty"`
	Sequence      uint32 `protobuf:"varint,5,opt,name=Sequence" json:"Sequence,omitempty"`
	Index         uint32 `protobuf:"varint,6,opt,name=Index" json:"Index,omitempty"`
	WifiFirmware  uint32 `protobuf:"varint,7,opt,name=WifiFirmware" json:"WifiFirmware,omitempty"`
}

func (m *SoftwareInfo) Reset()                    { *m = SoftwareInfo{} }
func (m *SoftwareInfo) String() string            { return proto.CompactTextString(m) }
func (*SoftwareInfo) ProtoMessage()               {}
func (*SoftwareInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *SoftwareInfo) GetActiveVersion() uint32 {
	if m != nil {
		return m.ActiveVersion
	}
	return 0
}

func (m *SoftwareInfo) GetBuildTime() uint32 {
	if m != nil {
		return m.BuildTime
	}
	return 0
}

func (m *SoftwareInfo) GetBaseAddress() uint32 {
	if m != nil {
		return m.BaseAddress
	}
	return 0
}

func (m *SoftwareInfo) GetRepository() uint32 {
	if m != nil {
		return m.Repository
	}
	return 0
}

func (m *SoftwareInfo) GetSequence() uint32 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *SoftwareInfo) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *SoftwareInfo) GetWifiFirmware() uint32 {
	if m != nil {
		return m.WifiFirmware
	}
	return 0
}

type ModuleStatus struct {
	ModuleID       uint64 `protobuf:"varint,1,opt,name=ModuleID" json:"ModuleID,omitempty"`
	Node           uint32 `protobuf:"varint,2,opt,name=Node" json:"Node,omitempty"`
	ActiveVersion  uint32 `protobuf:"varint,3,opt,name=ActiveVersion" json:"ActiveVersion,omitempty"`
	BuildTime      uint32 `protobuf:"varint,4,opt,name=BuildTime" json:"BuildTime,omitempty"`
	Repository     uint32 `protobuf:"varint,5,opt,name=Repository" json:"Repository,omitempty"`
	Sequence       uint32 `protobuf:"varint,6,opt,name=Sequence" json:"Sequence,omitempty"`
	LastPC         uint64 `protobuf:"varint,7,opt,name=LastPC" json:"LastPC,omitempty"`
	LastResetCause uint32 `protobuf:"varint,8,opt,name=LastResetCause" json:"LastResetCause,omitempty"`
	CloudToken     string `protobuf:"bytes,9,opt,name=CloudToken" json:"CloudToken,omitempty"`
	BaseAddress    uint32 `protobuf:"varint,10,opt,name=BaseAddress" json:"BaseAddress,omitempty"`
	// information about installed software
	InstalledSoftware []*SoftwareInfo `protobuf:"bytes,11,rep,name=InstalledSoftware" json:"InstalledSoftware,omitempty"`
	NodeStr           string          `protobuf:"bytes,12,opt,name=NodeStr" json:"NodeStr,omitempty"`
	LoaderVersion     uint32          `protobuf:"varint,13,opt,name=LoaderVersion" json:"LoaderVersion,omitempty"`
}

func (m *ModuleStatus) Reset()                    { *m = ModuleStatus{} }
func (m *ModuleStatus) String() string            { return proto.CompactTextString(m) }
func (*ModuleStatus) ProtoMessage()               {}
func (*ModuleStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ModuleStatus) GetModuleID() uint64 {
	if m != nil {
		return m.ModuleID
	}
	return 0
}

func (m *ModuleStatus) GetNode() uint32 {
	if m != nil {
		return m.Node
	}
	return 0
}

func (m *ModuleStatus) GetActiveVersion() uint32 {
	if m != nil {
		return m.ActiveVersion
	}
	return 0
}

func (m *ModuleStatus) GetBuildTime() uint32 {
	if m != nil {
		return m.BuildTime
	}
	return 0
}

func (m *ModuleStatus) GetRepository() uint32 {
	if m != nil {
		return m.Repository
	}
	return 0
}

func (m *ModuleStatus) GetSequence() uint32 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *ModuleStatus) GetLastPC() uint64 {
	if m != nil {
		return m.LastPC
	}
	return 0
}

func (m *ModuleStatus) GetLastResetCause() uint32 {
	if m != nil {
		return m.LastResetCause
	}
	return 0
}

func (m *ModuleStatus) GetCloudToken() string {
	if m != nil {
		return m.CloudToken
	}
	return ""
}

func (m *ModuleStatus) GetBaseAddress() uint32 {
	if m != nil {
		return m.BaseAddress
	}
	return 0
}

func (m *ModuleStatus) GetInstalledSoftware() []*SoftwareInfo {
	if m != nil {
		return m.InstalledSoftware
	}
	return nil
}

func (m *ModuleStatus) GetNodeStr() string {
	if m != nil {
		return m.NodeStr
	}
	return ""
}

func (m *ModuleStatus) GetLoaderVersion() uint32 {
	if m != nil {
		return m.LoaderVersion
	}
	return 0
}

type RenderModuleDetails struct {
	ModuleID              uint64     `protobuf:"varint,1,opt,name=ModuleID" json:"ModuleID,omitempty"`
	Owner                 *auth.User `protobuf:"bytes,2,opt,name=Owner" json:"Owner,omitempty"`
	CloudToken            string     `protobuf:"bytes,3,opt,name=CloudToken" json:"CloudToken,omitempty"`
	APPassword            string     `protobuf:"bytes,4,opt,name=APPassword" json:"APPassword,omitempty"`
	MostRecentSSID        string     `protobuf:"bytes,5,opt,name=MostRecentSSID" json:"MostRecentSSID,omitempty"`
	MostRecentIP          string     `protobuf:"bytes,6,opt,name=MostRecentIP" json:"MostRecentIP,omitempty"`
	SSIDPassword          string     `protobuf:"bytes,7,opt,name=SSIDPassword" json:"SSIDPassword,omitempty"`
	WifiFirmware          uint32     `protobuf:"varint,8,opt,name=WifiFirmware" json:"WifiFirmware,omitempty"`
	SSIDPasswordAvailable bool       `protobuf:"varint,9,opt,name=SSIDPasswordAvailable" json:"SSIDPasswordAvailable,omitempty"`
}

func (m *RenderModuleDetails) Reset()                    { *m = RenderModuleDetails{} }
func (m *RenderModuleDetails) String() string            { return proto.CompactTextString(m) }
func (*RenderModuleDetails) ProtoMessage()               {}
func (*RenderModuleDetails) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *RenderModuleDetails) GetModuleID() uint64 {
	if m != nil {
		return m.ModuleID
	}
	return 0
}

func (m *RenderModuleDetails) GetOwner() *auth.User {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *RenderModuleDetails) GetCloudToken() string {
	if m != nil {
		return m.CloudToken
	}
	return ""
}

func (m *RenderModuleDetails) GetAPPassword() string {
	if m != nil {
		return m.APPassword
	}
	return ""
}

func (m *RenderModuleDetails) GetMostRecentSSID() string {
	if m != nil {
		return m.MostRecentSSID
	}
	return ""
}

func (m *RenderModuleDetails) GetMostRecentIP() string {
	if m != nil {
		return m.MostRecentIP
	}
	return ""
}

func (m *RenderModuleDetails) GetSSIDPassword() string {
	if m != nil {
		return m.SSIDPassword
	}
	return ""
}

func (m *RenderModuleDetails) GetWifiFirmware() uint32 {
	if m != nil {
		return m.WifiFirmware
	}
	return 0
}

func (m *RenderModuleDetails) GetSSIDPasswordAvailable() bool {
	if m != nil {
		return m.SSIDPasswordAvailable
	}
	return false
}

type SensorID struct {
	SensorID uint64 `protobuf:"varint,1,opt,name=SensorID" json:"SensorID,omitempty"`
}

func (m *SensorID) Reset()                    { *m = SensorID{} }
func (m *SensorID) String() string            { return proto.CompactTextString(m) }
func (*SensorID) ProtoMessage()               {}
func (*SensorID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *SensorID) GetSensorID() uint64 {
	if m != nil {
		return m.SensorID
	}
	return 0
}

type UpdateWifiInfo struct {
	ModuleID        uint64 `protobuf:"varint,1,opt,name=ModuleID" json:"ModuleID,omitempty"`
	SSID            string `protobuf:"bytes,2,opt,name=SSID" json:"SSID,omitempty"`
	IP              string `protobuf:"bytes,3,opt,name=IP" json:"IP,omitempty"`
	Password        string `protobuf:"bytes,4,opt,name=Password" json:"Password,omitempty"`
	FirmwareVersion uint32 `protobuf:"varint,5,opt,name=FirmwareVersion" json:"FirmwareVersion,omitempty"`
	ResetCounter    uint32 `protobuf:"varint,6,opt,name=ResetCounter" json:"ResetCounter,omitempty"`
}

func (m *UpdateWifiInfo) Reset()                    { *m = UpdateWifiInfo{} }
func (m *UpdateWifiInfo) String() string            { return proto.CompactTextString(m) }
func (*UpdateWifiInfo) ProtoMessage()               {}
func (*UpdateWifiInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *UpdateWifiInfo) GetModuleID() uint64 {
	if m != nil {
		return m.ModuleID
	}
	return 0
}

func (m *UpdateWifiInfo) GetSSID() string {
	if m != nil {
		return m.SSID
	}
	return ""
}

func (m *UpdateWifiInfo) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *UpdateWifiInfo) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *UpdateWifiInfo) GetFirmwareVersion() uint32 {
	if m != nil {
		return m.FirmwareVersion
	}
	return 0
}

func (m *UpdateWifiInfo) GetResetCounter() uint32 {
	if m != nil {
		return m.ResetCounter
	}
	return 0
}

type SensorNameUpdate struct {
	SensorID     uint64 `protobuf:"varint,1,opt,name=SensorID" json:"SensorID,omitempty"`
	FriendlyName string `protobuf:"bytes,2,opt,name=FriendlyName" json:"FriendlyName,omitempty"`
}

func (m *SensorNameUpdate) Reset()                    { *m = SensorNameUpdate{} }
func (m *SensorNameUpdate) String() string            { return proto.CompactTextString(m) }
func (*SensorNameUpdate) ProtoMessage()               {}
func (*SensorNameUpdate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *SensorNameUpdate) GetSensorID() uint64 {
	if m != nil {
		return m.SensorID
	}
	return 0
}

func (m *SensorNameUpdate) GetFriendlyName() string {
	if m != nil {
		return m.FriendlyName
	}
	return ""
}

type ModuleNameUpdate struct {
	Module *singingcat.ModuleRef `protobuf:"bytes,1,opt,name=Module" json:"Module,omitempty"`
	Name   string                `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
}

func (m *ModuleNameUpdate) Reset()                    { *m = ModuleNameUpdate{} }
func (m *ModuleNameUpdate) String() string            { return proto.CompactTextString(m) }
func (*ModuleNameUpdate) ProtoMessage()               {}
func (*ModuleNameUpdate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *ModuleNameUpdate) GetModule() *singingcat.ModuleRef {
	if m != nil {
		return m.Module
	}
	return nil
}

func (m *ModuleNameUpdate) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type WifiFirmwareUpdate struct {
	Module  *singingcat.ModuleRef `protobuf:"bytes,1,opt,name=Module" json:"Module,omitempty"`
	Version uint32                `protobuf:"varint,2,opt,name=Version" json:"Version,omitempty"`
}

func (m *WifiFirmwareUpdate) Reset()                    { *m = WifiFirmwareUpdate{} }
func (m *WifiFirmwareUpdate) String() string            { return proto.CompactTextString(m) }
func (*WifiFirmwareUpdate) ProtoMessage()               {}
func (*WifiFirmwareUpdate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *WifiFirmwareUpdate) GetModule() *singingcat.ModuleRef {
	if m != nil {
		return m.Module
	}
	return nil
}

func (m *WifiFirmwareUpdate) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type StoreConfigFlagsRequest struct {
	Module *singingcat.ModuleRef `protobuf:"bytes,1,opt,name=Module" json:"Module,omitempty"`
	Flags1 uint32                `protobuf:"varint,2,opt,name=Flags1" json:"Flags1,omitempty"`
	Flags2 uint32                `protobuf:"varint,3,opt,name=Flags2" json:"Flags2,omitempty"`
	Flags  uint64                `protobuf:"varint,4,opt,name=Flags" json:"Flags,omitempty"`
}

func (m *StoreConfigFlagsRequest) Reset()                    { *m = StoreConfigFlagsRequest{} }
func (m *StoreConfigFlagsRequest) String() string            { return proto.CompactTextString(m) }
func (*StoreConfigFlagsRequest) ProtoMessage()               {}
func (*StoreConfigFlagsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *StoreConfigFlagsRequest) GetModule() *singingcat.ModuleRef {
	if m != nil {
		return m.Module
	}
	return nil
}

func (m *StoreConfigFlagsRequest) GetFlags1() uint32 {
	if m != nil {
		return m.Flags1
	}
	return 0
}

func (m *StoreConfigFlagsRequest) GetFlags2() uint32 {
	if m != nil {
		return m.Flags2
	}
	return 0
}

func (m *StoreConfigFlagsRequest) GetFlags() uint64 {
	if m != nil {
		return m.Flags
	}
	return 0
}

type ConfigFlags struct {
	Flags uint64 `protobuf:"varint,1,opt,name=Flags" json:"Flags,omitempty"`
}

func (m *ConfigFlags) Reset()                    { *m = ConfigFlags{} }
func (m *ConfigFlags) String() string            { return proto.CompactTextString(m) }
func (*ConfigFlags) ProtoMessage()               {}
func (*ConfigFlags) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *ConfigFlags) GetFlags() uint64 {
	if m != nil {
		return m.Flags
	}
	return 0
}

type Text struct {
	Text string `protobuf:"bytes,1,opt,name=Text" json:"Text,omitempty"`
}

func (m *Text) Reset()                    { *m = Text{} }
func (m *Text) String() string            { return proto.CompactTextString(m) }
func (*Text) ProtoMessage()               {}
func (*Text) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *Text) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type ByNameMatchResponse struct {
	Modules []*Module `protobuf:"bytes,1,rep,name=Modules" json:"Modules,omitempty"`
	Sensors []*Sensor `protobuf:"bytes,2,rep,name=Sensors" json:"Sensors,omitempty"`
}

func (m *ByNameMatchResponse) Reset()                    { *m = ByNameMatchResponse{} }
func (m *ByNameMatchResponse) String() string            { return proto.CompactTextString(m) }
func (*ByNameMatchResponse) ProtoMessage()               {}
func (*ByNameMatchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *ByNameMatchResponse) GetModules() []*Module {
	if m != nil {
		return m.Modules
	}
	return nil
}

func (m *ByNameMatchResponse) GetSensors() []*Sensor {
	if m != nil {
		return m.Sensors
	}
	return nil
}

type WifiInfo struct {
	ID              uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	ModuleID        uint64 `protobuf:"varint,2,opt,name=ModuleID" json:"ModuleID,omitempty"`
	Created         uint32 `protobuf:"varint,3,opt,name=Created" json:"Created,omitempty"`
	SSID            string `protobuf:"bytes,4,opt,name=SSID" json:"SSID,omitempty"`
	IP              string `protobuf:"bytes,5,opt,name=IP" json:"IP,omitempty"`
	Password        string `protobuf:"bytes,6,opt,name=Password" json:"Password,omitempty"`
	Index           uint32 `protobuf:"varint,7,opt,name=Index" json:"Index,omitempty"`
	FirmwareVersion uint32 `protobuf:"varint,8,opt,name=FirmwareVersion" json:"FirmwareVersion,omitempty"`
}

func (m *WifiInfo) Reset()                    { *m = WifiInfo{} }
func (m *WifiInfo) String() string            { return proto.CompactTextString(m) }
func (*WifiInfo) ProtoMessage()               {}
func (*WifiInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *WifiInfo) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *WifiInfo) GetModuleID() uint64 {
	if m != nil {
		return m.ModuleID
	}
	return 0
}

func (m *WifiInfo) GetCreated() uint32 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *WifiInfo) GetSSID() string {
	if m != nil {
		return m.SSID
	}
	return ""
}

func (m *WifiInfo) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *WifiInfo) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *WifiInfo) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *WifiInfo) GetFirmwareVersion() uint32 {
	if m != nil {
		return m.FirmwareVersion
	}
	return 0
}

type Module struct {
	ID              uint64          `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Created         uint32          `protobuf:"varint,2,opt,name=Created" json:"Created,omitempty"`
	FriendlyName    string          `protobuf:"bytes,3,opt,name=FriendlyName" json:"FriendlyName,omitempty"`
	NodeID          string          `protobuf:"bytes,4,opt,name=NodeID" json:"NodeID,omitempty"`
	ActiveVersion   uint32          `protobuf:"varint,5,opt,name=ActiveVersion" json:"ActiveVersion,omitempty"`
	UpgradeStrategy UpgradeStrategy `protobuf:"varint,6,opt,name=UpgradeStrategy,enum=scweb.UpgradeStrategy" json:"UpgradeStrategy,omitempty"`
	AppRepository   uint64          `protobuf:"varint,7,opt,name=AppRepository" json:"AppRepository,omitempty"`
	BuildTime       uint32          `protobuf:"varint,8,opt,name=BuildTime" json:"BuildTime,omitempty"`
	LastPC          uint64          `protobuf:"varint,9,opt,name=LastPC" json:"LastPC,omitempty"`
	CloudToken      string          `protobuf:"bytes,10,opt,name=CloudToken" json:"CloudToken,omitempty"`
	BaseAddress     uint32          `protobuf:"varint,11,opt,name=BaseAddress" json:"BaseAddress,omitempty"`
	LastResetCause  uint32          `protobuf:"varint,12,opt,name=LastResetCause" json:"LastResetCause,omitempty"`
	LastEnquiry     uint32          `protobuf:"varint,13,opt,name=LastEnquiry" json:"LastEnquiry,omitempty"`
	LoaderVersion   uint32          `protobuf:"varint,14,opt,name=LoaderVersion" json:"LoaderVersion,omitempty"`
	Flags           uint64          `protobuf:"varint,15,opt,name=Flags" json:"Flags,omitempty"`
	//  uint32 Flags2 = 16;      // flags as reported most recently by module
	OwnerUserID string `protobuf:"bytes,17,opt,name=OwnerUserID" json:"OwnerUserID,omitempty"`
}

func (m *Module) Reset()                    { *m = Module{} }
func (m *Module) String() string            { return proto.CompactTextString(m) }
func (*Module) ProtoMessage()               {}
func (*Module) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *Module) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Module) GetCreated() uint32 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Module) GetFriendlyName() string {
	if m != nil {
		return m.FriendlyName
	}
	return ""
}

func (m *Module) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

func (m *Module) GetActiveVersion() uint32 {
	if m != nil {
		return m.ActiveVersion
	}
	return 0
}

func (m *Module) GetUpgradeStrategy() UpgradeStrategy {
	if m != nil {
		return m.UpgradeStrategy
	}
	return UpgradeStrategy_UNDEFINED
}

func (m *Module) GetAppRepository() uint64 {
	if m != nil {
		return m.AppRepository
	}
	return 0
}

func (m *Module) GetBuildTime() uint32 {
	if m != nil {
		return m.BuildTime
	}
	return 0
}

func (m *Module) GetLastPC() uint64 {
	if m != nil {
		return m.LastPC
	}
	return 0
}

func (m *Module) GetCloudToken() string {
	if m != nil {
		return m.CloudToken
	}
	return ""
}

func (m *Module) GetBaseAddress() uint32 {
	if m != nil {
		return m.BaseAddress
	}
	return 0
}

func (m *Module) GetLastResetCause() uint32 {
	if m != nil {
		return m.LastResetCause
	}
	return 0
}

func (m *Module) GetLastEnquiry() uint32 {
	if m != nil {
		return m.LastEnquiry
	}
	return 0
}

func (m *Module) GetLoaderVersion() uint32 {
	if m != nil {
		return m.LoaderVersion
	}
	return 0
}

func (m *Module) GetFlags() uint64 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *Module) GetOwnerUserID() string {
	if m != nil {
		return m.OwnerUserID
	}
	return ""
}

// only to store in database, api needs to denormalize the unit
type DBSensor struct {
	ID           uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	FriendlyName string `protobuf:"bytes,2,opt,name=FriendlyName" json:"FriendlyName,omitempty"`
	Name         string `protobuf:"bytes,3,opt,name=Name" json:"Name,omitempty"`
	SensorUnitID uint64 `protobuf:"varint,4,opt,name=SensorUnitID" json:"SensorUnitID,omitempty"`
	SensorTypeID uint64 `protobuf:"varint,5,opt,name=SensorTypeID" json:"SensorTypeID,omitempty"`
	ModuleID     uint64 `protobuf:"varint,6,opt,name=ModuleID" json:"ModuleID,omitempty"`
}

func (m *DBSensor) Reset()                    { *m = DBSensor{} }
func (m *DBSensor) String() string            { return proto.CompactTextString(m) }
func (*DBSensor) ProtoMessage()               {}
func (*DBSensor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *DBSensor) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *DBSensor) GetFriendlyName() string {
	if m != nil {
		return m.FriendlyName
	}
	return ""
}

func (m *DBSensor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DBSensor) GetSensorUnitID() uint64 {
	if m != nil {
		return m.SensorUnitID
	}
	return 0
}

func (m *DBSensor) GetSensorTypeID() uint64 {
	if m != nil {
		return m.SensorTypeID
	}
	return 0
}

func (m *DBSensor) GetModuleID() uint64 {
	if m != nil {
		return m.ModuleID
	}
	return 0
}

type SensorUnit struct {
	ID           uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Divisor      uint32 `protobuf:"varint,2,opt,name=Divisor" json:"Divisor,omitempty"`
	Multiplier   uint32 `protobuf:"varint,3,opt,name=Multiplier" json:"Multiplier,omitempty"`
	UnitName     string `protobuf:"bytes,4,opt,name=UnitName" json:"UnitName,omitempty"`
	UnitPrefix   string `protobuf:"bytes,5,opt,name=UnitPrefix" json:"UnitPrefix,omitempty"`
	NormalUnitID uint64 `protobuf:"varint,6,opt,name=NormalUnitID" json:"NormalUnitID,omitempty"`
}

func (m *SensorUnit) Reset()                    { *m = SensorUnit{} }
func (m *SensorUnit) String() string            { return proto.CompactTextString(m) }
func (*SensorUnit) ProtoMessage()               {}
func (*SensorUnit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *SensorUnit) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *SensorUnit) GetDivisor() uint32 {
	if m != nil {
		return m.Divisor
	}
	return 0
}

func (m *SensorUnit) GetMultiplier() uint32 {
	if m != nil {
		return m.Multiplier
	}
	return 0
}

func (m *SensorUnit) GetUnitName() string {
	if m != nil {
		return m.UnitName
	}
	return ""
}

func (m *SensorUnit) GetUnitPrefix() string {
	if m != nil {
		return m.UnitPrefix
	}
	return ""
}

func (m *SensorUnit) GetNormalUnitID() uint64 {
	if m != nil {
		return m.NormalUnitID
	}
	return 0
}

type SensorType struct {
	ID   uint64 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
}

func (m *SensorType) Reset()                    { *m = SensorType{} }
func (m *SensorType) String() string            { return proto.CompactTextString(m) }
func (*SensorType) ProtoMessage()               {}
func (*SensorType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *SensorType) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *SensorType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*RenderModule)(nil), "scweb.RenderModule")
	proto.RegisterType((*RenderSensor)(nil), "scweb.RenderSensor")
	proto.RegisterType((*RenderModuleList)(nil), "scweb.RenderModuleList")
	proto.RegisterType((*NodeRef)(nil), "scweb.NodeRef")
	proto.RegisterType((*SensorRef)(nil), "scweb.SensorRef")
	proto.RegisterType((*Sensor)(nil), "scweb.Sensor")
	proto.RegisterType((*SensorList)(nil), "scweb.SensorList")
	proto.RegisterType((*RawToGoodSensorValueRequest)(nil), "scweb.RawToGoodSensorValueRequest")
	proto.RegisterType((*GoodSensorValue)(nil), "scweb.GoodSensorValue")
	proto.RegisterType((*SoftwareInfo)(nil), "scweb.SoftwareInfo")
	proto.RegisterType((*ModuleStatus)(nil), "scweb.ModuleStatus")
	proto.RegisterType((*RenderModuleDetails)(nil), "scweb.RenderModuleDetails")
	proto.RegisterType((*SensorID)(nil), "scweb.SensorID")
	proto.RegisterType((*UpdateWifiInfo)(nil), "scweb.UpdateWifiInfo")
	proto.RegisterType((*SensorNameUpdate)(nil), "scweb.SensorNameUpdate")
	proto.RegisterType((*ModuleNameUpdate)(nil), "scweb.ModuleNameUpdate")
	proto.RegisterType((*WifiFirmwareUpdate)(nil), "scweb.WifiFirmwareUpdate")
	proto.RegisterType((*StoreConfigFlagsRequest)(nil), "scweb.StoreConfigFlagsRequest")
	proto.RegisterType((*ConfigFlags)(nil), "scweb.ConfigFlags")
	proto.RegisterType((*Text)(nil), "scweb.Text")
	proto.RegisterType((*ByNameMatchResponse)(nil), "scweb.ByNameMatchResponse")
	proto.RegisterType((*WifiInfo)(nil), "scweb.WifiInfo")
	proto.RegisterType((*Module)(nil), "scweb.Module")
	proto.RegisterType((*DBSensor)(nil), "scweb.DBSensor")
	proto.RegisterType((*SensorUnit)(nil), "scweb.SensorUnit")
	proto.RegisterType((*SensorType)(nil), "scweb.SensorType")
	proto.RegisterEnum("scweb.UpgradeStrategy", UpgradeStrategy_name, UpgradeStrategy_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SCWebService service

type SCWebServiceClient interface {
	// update wifiinfo (when received)
	StoreWifiInfo(ctx context.Context, in *UpdateWifiInfo, opts ...grpc.CallOption) (*common.Void, error)
	// get a sensor by its ID
	GetSensorByID(ctx context.Context, in *SensorID, opts ...grpc.CallOption) (*Sensor, error)
	RenderOnlineModules(ctx context.Context, in *base.Void, opts ...grpc.CallOption) (*RenderModuleList, error)
	// returns current values from database, including the canonical moduleid
	GetModule(ctx context.Context, in *NodeRef, opts ...grpc.CallOption) (*Module, error)
	// returns current values from database, including the canonical moduleid
	GetModuleByID(ctx context.Context, in *singingcat.ModuleRef, opts ...grpc.CallOption) (*Module, error)
	// returns a nodeid from a moduleid
	GetNode(ctx context.Context, in *singingcat.ModuleRef, opts ...grpc.CallOption) (*NodeRef, error)
	ResolveSensorByNode(ctx context.Context, in *SensorRef, opts ...grpc.CallOption) (*Sensor, error)
	// get all sensors of modules that are currently online
	GetOnlineSensors(ctx context.Context, in *base.Void, opts ...grpc.CallOption) (*SensorList, error)
	// convert a sensor value (as sent by module) to its normalized unit
	RawToGoodSensorValue(ctx context.Context, in *RawToGoodSensorValueRequest, opts ...grpc.CallOption) (*GoodSensorValue, error)
	// store status of a module
	StoreModuleStatus(ctx context.Context, in *ModuleStatus, opts ...grpc.CallOption) (*common.Void, error)
	// get status of a module
	GetModuleStatus(ctx context.Context, in *singingcat.ModuleRef, opts ...grpc.CallOption) (*ModuleStatus, error)
	// get details of a module
	RenderModuleDetail(ctx context.Context, in *singingcat.ModuleRef, opts ...grpc.CallOption) (*RenderModuleDetails, error)
	// update name of module
	UpdateModuleName(ctx context.Context, in *ModuleNameUpdate, opts ...grpc.CallOption) (*common.Void, error)
	// update friendly name of sensor
	UpdateSensorName(ctx context.Context, in *SensorNameUpdate, opts ...grpc.CallOption) (*common.Void, error)
	// update the database with a new wifi firmware version (does not
	// automatically update the firmware! see "espota"
	UpdateWifiFirmware(ctx context.Context, in *WifiFirmwareUpdate, opts ...grpc.CallOption) (*common.Void, error)
	// store config flags
	StoreConfigFlags(ctx context.Context, in *StoreConfigFlagsRequest, opts ...grpc.CallOption) (*common.Void, error)
	// get config flags
	GetConfigFlags(ctx context.Context, in *singingcat.ModuleRef, opts ...grpc.CallOption) (*ConfigFlags, error)
	// if a new module is added, this needs to be called. NodeID is mandatory,
	// rest is optional
	AddModule(ctx context.Context, in *Module, opts ...grpc.CallOption) (*Module, error)
	// do a fuzzy match on words to return modules and sensors
	ByNameMatch(ctx context.Context, in *Text, opts ...grpc.CallOption) (*ByNameMatchResponse, error)
}

type sCWebServiceClient struct {
	cc *grpc.ClientConn
}

func NewSCWebServiceClient(cc *grpc.ClientConn) SCWebServiceClient {
	return &sCWebServiceClient{cc}
}

func (c *sCWebServiceClient) StoreWifiInfo(ctx context.Context, in *UpdateWifiInfo, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/scweb.SCWebService/StoreWifiInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sCWebServiceClient) GetSensorByID(ctx context.Context, in *SensorID, opts ...grpc.CallOption) (*Sensor, error) {
	out := new(Sensor)
	err := grpc.Invoke(ctx, "/scweb.SCWebService/GetSensorByID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sCWebServiceClient) RenderOnlineModules(ctx context.Context, in *base.Void, opts ...grpc.CallOption) (*RenderModuleList, error) {
	out := new(RenderModuleList)
	err := grpc.Invoke(ctx, "/scweb.SCWebService/RenderOnlineModules", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sCWebServiceClient) GetModule(ctx context.Context, in *NodeRef, opts ...grpc.CallOption) (*Module, error) {
	out := new(Module)
	err := grpc.Invoke(ctx, "/scweb.SCWebService/GetModule", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sCWebServiceClient) GetModuleByID(ctx context.Context, in *singingcat.ModuleRef, opts ...grpc.CallOption) (*Module, error) {
	out := new(Module)
	err := grpc.Invoke(ctx, "/scweb.SCWebService/GetModuleByID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sCWebServiceClient) GetNode(ctx context.Context, in *singingcat.ModuleRef, opts ...grpc.CallOption) (*NodeRef, error) {
	out := new(NodeRef)
	err := grpc.Invoke(ctx, "/scweb.SCWebService/GetNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sCWebServiceClient) ResolveSensorByNode(ctx context.Context, in *SensorRef, opts ...grpc.CallOption) (*Sensor, error) {
	out := new(Sensor)
	err := grpc.Invoke(ctx, "/scweb.SCWebService/ResolveSensorByNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sCWebServiceClient) GetOnlineSensors(ctx context.Context, in *base.Void, opts ...grpc.CallOption) (*SensorList, error) {
	out := new(SensorList)
	err := grpc.Invoke(ctx, "/scweb.SCWebService/GetOnlineSensors", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sCWebServiceClient) RawToGoodSensorValue(ctx context.Context, in *RawToGoodSensorValueRequest, opts ...grpc.CallOption) (*GoodSensorValue, error) {
	out := new(GoodSensorValue)
	err := grpc.Invoke(ctx, "/scweb.SCWebService/RawToGoodSensorValue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sCWebServiceClient) StoreModuleStatus(ctx context.Context, in *ModuleStatus, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/scweb.SCWebService/StoreModuleStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sCWebServiceClient) GetModuleStatus(ctx context.Context, in *singingcat.ModuleRef, opts ...grpc.CallOption) (*ModuleStatus, error) {
	out := new(ModuleStatus)
	err := grpc.Invoke(ctx, "/scweb.SCWebService/GetModuleStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sCWebServiceClient) RenderModuleDetail(ctx context.Context, in *singingcat.ModuleRef, opts ...grpc.CallOption) (*RenderModuleDetails, error) {
	out := new(RenderModuleDetails)
	err := grpc.Invoke(ctx, "/scweb.SCWebService/RenderModuleDetail", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sCWebServiceClient) UpdateModuleName(ctx context.Context, in *ModuleNameUpdate, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/scweb.SCWebService/UpdateModuleName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sCWebServiceClient) UpdateSensorName(ctx context.Context, in *SensorNameUpdate, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/scweb.SCWebService/UpdateSensorName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sCWebServiceClient) UpdateWifiFirmware(ctx context.Context, in *WifiFirmwareUpdate, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/scweb.SCWebService/UpdateWifiFirmware", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sCWebServiceClient) StoreConfigFlags(ctx context.Context, in *StoreConfigFlagsRequest, opts ...grpc.CallOption) (*common.Void, error) {
	out := new(common.Void)
	err := grpc.Invoke(ctx, "/scweb.SCWebService/StoreConfigFlags", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sCWebServiceClient) GetConfigFlags(ctx context.Context, in *singingcat.ModuleRef, opts ...grpc.CallOption) (*ConfigFlags, error) {
	out := new(ConfigFlags)
	err := grpc.Invoke(ctx, "/scweb.SCWebService/GetConfigFlags", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sCWebServiceClient) AddModule(ctx context.Context, in *Module, opts ...grpc.CallOption) (*Module, error) {
	out := new(Module)
	err := grpc.Invoke(ctx, "/scweb.SCWebService/AddModule", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sCWebServiceClient) ByNameMatch(ctx context.Context, in *Text, opts ...grpc.CallOption) (*ByNameMatchResponse, error) {
	out := new(ByNameMatchResponse)
	err := grpc.Invoke(ctx, "/scweb.SCWebService/ByNameMatch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SCWebService service

type SCWebServiceServer interface {
	// update wifiinfo (when received)
	StoreWifiInfo(context.Context, *UpdateWifiInfo) (*common.Void, error)
	// get a sensor by its ID
	GetSensorByID(context.Context, *SensorID) (*Sensor, error)
	RenderOnlineModules(context.Context, *base.Void) (*RenderModuleList, error)
	// returns current values from database, including the canonical moduleid
	GetModule(context.Context, *NodeRef) (*Module, error)
	// returns current values from database, including the canonical moduleid
	GetModuleByID(context.Context, *singingcat.ModuleRef) (*Module, error)
	// returns a nodeid from a moduleid
	GetNode(context.Context, *singingcat.ModuleRef) (*NodeRef, error)
	ResolveSensorByNode(context.Context, *SensorRef) (*Sensor, error)
	// get all sensors of modules that are currently online
	GetOnlineSensors(context.Context, *base.Void) (*SensorList, error)
	// convert a sensor value (as sent by module) to its normalized unit
	RawToGoodSensorValue(context.Context, *RawToGoodSensorValueRequest) (*GoodSensorValue, error)
	// store status of a module
	StoreModuleStatus(context.Context, *ModuleStatus) (*common.Void, error)
	// get status of a module
	GetModuleStatus(context.Context, *singingcat.ModuleRef) (*ModuleStatus, error)
	// get details of a module
	RenderModuleDetail(context.Context, *singingcat.ModuleRef) (*RenderModuleDetails, error)
	// update name of module
	UpdateModuleName(context.Context, *ModuleNameUpdate) (*common.Void, error)
	// update friendly name of sensor
	UpdateSensorName(context.Context, *SensorNameUpdate) (*common.Void, error)
	// update the database with a new wifi firmware version (does not
	// automatically update the firmware! see "espota"
	UpdateWifiFirmware(context.Context, *WifiFirmwareUpdate) (*common.Void, error)
	// store config flags
	StoreConfigFlags(context.Context, *StoreConfigFlagsRequest) (*common.Void, error)
	// get config flags
	GetConfigFlags(context.Context, *singingcat.ModuleRef) (*ConfigFlags, error)
	// if a new module is added, this needs to be called. NodeID is mandatory,
	// rest is optional
	AddModule(context.Context, *Module) (*Module, error)
	// do a fuzzy match on words to return modules and sensors
	ByNameMatch(context.Context, *Text) (*ByNameMatchResponse, error)
}

func RegisterSCWebServiceServer(s *grpc.Server, srv SCWebServiceServer) {
	s.RegisterService(&_SCWebService_serviceDesc, srv)
}

func _SCWebService_StoreWifiInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWifiInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCWebServiceServer).StoreWifiInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scweb.SCWebService/StoreWifiInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCWebServiceServer).StoreWifiInfo(ctx, req.(*UpdateWifiInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _SCWebService_GetSensorByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SensorID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCWebServiceServer).GetSensorByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scweb.SCWebService/GetSensorByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCWebServiceServer).GetSensorByID(ctx, req.(*SensorID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SCWebService_RenderOnlineModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(base.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCWebServiceServer).RenderOnlineModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scweb.SCWebService/RenderOnlineModules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCWebServiceServer).RenderOnlineModules(ctx, req.(*base.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _SCWebService_GetModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeRef)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCWebServiceServer).GetModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scweb.SCWebService/GetModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCWebServiceServer).GetModule(ctx, req.(*NodeRef))
	}
	return interceptor(ctx, in, info, handler)
}

func _SCWebService_GetModuleByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(singingcat.ModuleRef)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCWebServiceServer).GetModuleByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scweb.SCWebService/GetModuleByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCWebServiceServer).GetModuleByID(ctx, req.(*singingcat.ModuleRef))
	}
	return interceptor(ctx, in, info, handler)
}

func _SCWebService_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(singingcat.ModuleRef)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCWebServiceServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scweb.SCWebService/GetNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCWebServiceServer).GetNode(ctx, req.(*singingcat.ModuleRef))
	}
	return interceptor(ctx, in, info, handler)
}

func _SCWebService_ResolveSensorByNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SensorRef)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCWebServiceServer).ResolveSensorByNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scweb.SCWebService/ResolveSensorByNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCWebServiceServer).ResolveSensorByNode(ctx, req.(*SensorRef))
	}
	return interceptor(ctx, in, info, handler)
}

func _SCWebService_GetOnlineSensors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(base.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCWebServiceServer).GetOnlineSensors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scweb.SCWebService/GetOnlineSensors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCWebServiceServer).GetOnlineSensors(ctx, req.(*base.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _SCWebService_RawToGoodSensorValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RawToGoodSensorValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCWebServiceServer).RawToGoodSensorValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scweb.SCWebService/RawToGoodSensorValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCWebServiceServer).RawToGoodSensorValue(ctx, req.(*RawToGoodSensorValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SCWebService_StoreModuleStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModuleStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCWebServiceServer).StoreModuleStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scweb.SCWebService/StoreModuleStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCWebServiceServer).StoreModuleStatus(ctx, req.(*ModuleStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _SCWebService_GetModuleStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(singingcat.ModuleRef)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCWebServiceServer).GetModuleStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scweb.SCWebService/GetModuleStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCWebServiceServer).GetModuleStatus(ctx, req.(*singingcat.ModuleRef))
	}
	return interceptor(ctx, in, info, handler)
}

func _SCWebService_RenderModuleDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(singingcat.ModuleRef)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCWebServiceServer).RenderModuleDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scweb.SCWebService/RenderModuleDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCWebServiceServer).RenderModuleDetail(ctx, req.(*singingcat.ModuleRef))
	}
	return interceptor(ctx, in, info, handler)
}

func _SCWebService_UpdateModuleName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModuleNameUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCWebServiceServer).UpdateModuleName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scweb.SCWebService/UpdateModuleName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCWebServiceServer).UpdateModuleName(ctx, req.(*ModuleNameUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _SCWebService_UpdateSensorName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SensorNameUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCWebServiceServer).UpdateSensorName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scweb.SCWebService/UpdateSensorName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCWebServiceServer).UpdateSensorName(ctx, req.(*SensorNameUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _SCWebService_UpdateWifiFirmware_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WifiFirmwareUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCWebServiceServer).UpdateWifiFirmware(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scweb.SCWebService/UpdateWifiFirmware",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCWebServiceServer).UpdateWifiFirmware(ctx, req.(*WifiFirmwareUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _SCWebService_StoreConfigFlags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreConfigFlagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCWebServiceServer).StoreConfigFlags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scweb.SCWebService/StoreConfigFlags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCWebServiceServer).StoreConfigFlags(ctx, req.(*StoreConfigFlagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SCWebService_GetConfigFlags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(singingcat.ModuleRef)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCWebServiceServer).GetConfigFlags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scweb.SCWebService/GetConfigFlags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCWebServiceServer).GetConfigFlags(ctx, req.(*singingcat.ModuleRef))
	}
	return interceptor(ctx, in, info, handler)
}

func _SCWebService_AddModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Module)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCWebServiceServer).AddModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scweb.SCWebService/AddModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCWebServiceServer).AddModule(ctx, req.(*Module))
	}
	return interceptor(ctx, in, info, handler)
}

func _SCWebService_ByNameMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Text)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCWebServiceServer).ByNameMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scweb.SCWebService/ByNameMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCWebServiceServer).ByNameMatch(ctx, req.(*Text))
	}
	return interceptor(ctx, in, info, handler)
}

var _SCWebService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "scweb.SCWebService",
	HandlerType: (*SCWebServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreWifiInfo",
			Handler:    _SCWebService_StoreWifiInfo_Handler,
		},
		{
			MethodName: "GetSensorByID",
			Handler:    _SCWebService_GetSensorByID_Handler,
		},
		{
			MethodName: "RenderOnlineModules",
			Handler:    _SCWebService_RenderOnlineModules_Handler,
		},
		{
			MethodName: "GetModule",
			Handler:    _SCWebService_GetModule_Handler,
		},
		{
			MethodName: "GetModuleByID",
			Handler:    _SCWebService_GetModuleByID_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _SCWebService_GetNode_Handler,
		},
		{
			MethodName: "ResolveSensorByNode",
			Handler:    _SCWebService_ResolveSensorByNode_Handler,
		},
		{
			MethodName: "GetOnlineSensors",
			Handler:    _SCWebService_GetOnlineSensors_Handler,
		},
		{
			MethodName: "RawToGoodSensorValue",
			Handler:    _SCWebService_RawToGoodSensorValue_Handler,
		},
		{
			MethodName: "StoreModuleStatus",
			Handler:    _SCWebService_StoreModuleStatus_Handler,
		},
		{
			MethodName: "GetModuleStatus",
			Handler:    _SCWebService_GetModuleStatus_Handler,
		},
		{
			MethodName: "RenderModuleDetail",
			Handler:    _SCWebService_RenderModuleDetail_Handler,
		},
		{
			MethodName: "UpdateModuleName",
			Handler:    _SCWebService_UpdateModuleName_Handler,
		},
		{
			MethodName: "UpdateSensorName",
			Handler:    _SCWebService_UpdateSensorName_Handler,
		},
		{
			MethodName: "UpdateWifiFirmware",
			Handler:    _SCWebService_UpdateWifiFirmware_Handler,
		},
		{
			MethodName: "StoreConfigFlags",
			Handler:    _SCWebService_StoreConfigFlags_Handler,
		},
		{
			MethodName: "GetConfigFlags",
			Handler:    _SCWebService_GetConfigFlags_Handler,
		},
		{
			MethodName: "AddModule",
			Handler:    _SCWebService_AddModule_Handler,
		},
		{
			MethodName: "ByNameMatch",
			Handler:    _SCWebService_ByNameMatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "golang.singingcat.net/apis/scweb/scweb.proto",
}

func init() { proto.RegisterFile("golang.singingcat.net/apis/scweb/scweb.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1844 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x58, 0xcb, 0x72, 0xeb, 0x48,
	0x19, 0x46, 0xbe, 0xfb, 0xb7, 0x9d, 0x38, 0x9d, 0x39, 0x39, 0xc2, 0x50, 0xa7, 0x8c, 0x60, 0x86,
	0x90, 0x62, 0x7c, 0x66, 0x02, 0x13, 0x8a, 0x5b, 0xd5, 0x38, 0xb1, 0x93, 0x72, 0x55, 0x92, 0x93,
	0x6a, 0x27, 0x99, 0x62, 0xc1, 0x42, 0xb1, 0x3a, 0x1e, 0x15, 0xb2, 0x5a, 0x47, 0x6a, 0x27, 0x27,
	0x2f, 0xc1, 0x86, 0x2d, 0x4b, 0x9e, 0x81, 0x05, 0x5b, 0x5e, 0x80, 0x07, 0x80, 0x15, 0x3b, 0x9e,
	0x82, 0xea, 0x8b, 0xa4, 0xd6, 0x25, 0x3e, 0xe7, 0x50, 0x6c, 0x12, 0xf5, 0xd7, 0x7f, 0x5f, 0xfe,
	0xeb, 0xf7, 0xb7, 0xe1, 0xa7, 0x4b, 0xea, 0xd9, 0xfe, 0x72, 0x14, 0xb9, 0xfe, 0xd2, 0xf5, 0x97,
	0x0b, 0x9b, 0x8d, 0x7c, 0xc2, 0x5e, 0xdb, 0x81, 0x1b, 0xbd, 0x8e, 0x16, 0x8f, 0xe4, 0x4e, 0xfe,
	0x1d, 0x05, 0x21, 0x65, 0x14, 0xd5, 0xc5, 0x60, 0x70, 0xb0, 0x61, 0xd1, 0x9d, 0x1d, 0x11, 0xf1,
	0x47, 0x2e, 0x19, 0x8c, 0x94, 0xec, 0x82, 0xfa, 0xa1, 0xed, 0x3c, 0x52, 0xea, 0xa4, 0xb2, 0x0b,
	0xba, 0x5a, 0x51, 0x5f, 0xfd, 0x53, 0xf2, 0x07, 0x1b, 0xe4, 0xed, 0x35, 0xfb, 0x56, 0xfc, 0x51,
	0xb2, 0x47, 0x9b, 0x2e, 0x9f, 0x60, 0xda, 0xa7, 0x5c, 0x67, 0xfd, 0xbb, 0x0a, 0x5d, 0x4c, 0x7c,
	0x87, 0x84, 0x17, 0xd4, 0x59, 0x7b, 0x04, 0x6d, 0x41, 0x65, 0x36, 0x31, 0x8d, 0xa1, 0xb1, 0x5f,
	0xc3, 0x95, 0xd9, 0x04, 0xed, 0x41, 0xe3, 0x92, 0x3a, 0x64, 0x36, 0x31, 0x2b, 0x43, 0x63, 0xbf,
	0x8d, 0xd5, 0x08, 0x59, 0xd0, 0x3d, 0x0d, 0x5d, 0xe2, 0x3b, 0xde, 0xd3, 0xa5, 0xbd, 0x22, 0x66,
	0x55, 0xcc, 0x66, 0x30, 0x2e, 0xf3, 0xc6, 0xf7, 0x5c, 0x9f, 0xcc, 0x99, 0xcd, 0xd6, 0x91, 0x59,
	0x93, 0x32, 0x3a, 0xc6, 0x65, 0xc6, 0x41, 0x70, 0xbc, 0x76, 0x3d, 0x67, 0x62, 0x33, 0x62, 0xd6,
	0xa5, 0x8c, 0x8e, 0xa1, 0x57, 0x00, 0x78, 0xed, 0xfb, 0xae, 0xbf, 0x1c, 0x07, 0x81, 0xd9, 0x10,
	0x12, 0x1a, 0x82, 0x7e, 0x04, 0xbd, 0x99, 0x1f, 0x31, 0xdb, 0xf3, 0x88, 0x33, 0x0e, 0x82, 0xc8,
	0x6c, 0x0e, 0xab, 0xfb, 0x6d, 0x9c, 0x05, 0xd1, 0xe7, 0xd0, 0x9c, 0x13, 0x3f, 0xa2, 0x61, 0x64,
	0xb6, 0x86, 0xd5, 0xfd, 0xce, 0xe1, 0xee, 0x48, 0x3a, 0x54, 0xea, 0x2f, 0xe7, 0x70, 0x2c, 0x83,
	0x86, 0x50, 0x7f, 0xf3, 0xe8, 0x93, 0xd0, 0x6c, 0x0f, 0x8d, 0xfd, 0xce, 0x21, 0x8c, 0x84, 0xb5,
	0x6f, 0x22, 0x12, 0x62, 0x39, 0xc1, 0xaf, 0x25, 0x3e, 0xa6, 0x2b, 0xdb, 0xf5, 0x4c, 0x90, 0xd7,
	0x4a, 0x11, 0xf4, 0x19, 0x6c, 0x61, 0x12, 0xd0, 0xc8, 0x65, 0x34, 0x94, 0x46, 0xea, 0x08, 0x99,
	0x1c, 0xca, 0x4d, 0x90, 0x22, 0xb3, 0x89, 0xd9, 0x95, 0x26, 0xd0, 0x31, 0xae, 0xe2, 0x39, 0xb5,
	0x1d, 0x12, 0xde, 0x92, 0x30, 0x72, 0xa9, 0x6f, 0xf6, 0x84, 0x50, 0x16, 0xe4, 0xce, 0x92, 0xc6,
	0x35, 0xb7, 0x86, 0xc6, 0x7e, 0x0b, 0xab, 0x91, 0xf5, 0x17, 0x23, 0xf6, 0xb2, 0xd4, 0xae, 0xe0,
	0xe5, 0xbc, 0x37, 0x2b, 0x25, 0xde, 0x44, 0x50, 0xd3, 0x3c, 0x2d, 0xbe, 0xd1, 0x27, 0x50, 0xbf,
	0xb5, 0xbd, 0x35, 0x51, 0xae, 0x95, 0x03, 0xf4, 0x7d, 0x68, 0x5f, 0xbb, 0x2b, 0x12, 0x31, 0x7b,
	0x15, 0x28, 0x87, 0xa6, 0x00, 0x32, 0xa1, 0x39, 0xf5, 0xed, 0x3b, 0x8f, 0x38, 0xc2, 0x95, 0x2d,
	0x1c, 0x0f, 0xad, 0x31, 0xf4, 0xf5, 0x58, 0x3c, 0x77, 0x23, 0xc6, 0xbd, 0x26, 0x47, 0x91, 0x69,
	0x94, 0x78, 0x4d, 0xce, 0xe1, 0x58, 0xc6, 0xfa, 0x01, 0x34, 0x79, 0x80, 0x62, 0x72, 0xaf, 0x45,
	0x2e, 0xd7, 0xb3, 0x17, 0x47, 0xae, 0xf5, 0x0b, 0x68, 0x2b, 0x5f, 0x3f, 0x2f, 0x94, 0x28, 0x5b,
	0x49, 0x95, 0xb5, 0xfe, 0x64, 0x40, 0xe3, 0x19, 0xfb, 0x0d, 0xa0, 0x25, 0x6f, 0xa0, 0xf2, 0xa4,
	0x86, 0x93, 0xf1, 0x07, 0x65, 0x4a, 0x7c, 0x5c, 0x4d, 0xb3, 0xed, 0xa7, 0x50, 0xbb, 0xf1, 0x5d,
	0x26, 0x0c, 0xd8, 0x39, 0xdc, 0x51, 0x6a, 0xcb, 0x0b, 0xf0, 0x09, 0x2c, 0xa6, 0xad, 0xaf, 0x00,
	0x24, 0x26, 0xcc, 0xf5, 0xe3, 0x34, 0xc8, 0xa5, 0xb9, 0x7a, 0x99, 0x75, 0x49, 0x78, 0x5b, 0x6f,
	0xe0, 0x7b, 0xd8, 0x7e, 0xbc, 0xa6, 0x67, 0x94, 0x3a, 0x12, 0x13, 0xbe, 0xc3, 0xe4, 0xed, 0x9a,
	0x44, 0x8c, 0x2b, 0x24, 0xd1, 0x44, 0xcd, 0x64, 0x9c, 0x3a, 0x9d, 0x6b, 0x5a, 0x55, 0x4e, 0xb7,
	0x2e, 0x61, 0x3b, 0xb7, 0x17, 0xfa, 0x34, 0xb6, 0x97, 0xd8, 0xa2, 0x70, 0x97, 0xd8, 0x98, 0x99,
	0xfd, 0x8c, 0x78, 0xbf, 0xff, 0x18, 0xd0, 0x9d, 0xd3, 0x7b, 0xf6, 0x68, 0x87, 0x64, 0xe6, 0xdf,
	0x53, 0x9e, 0x02, 0xe3, 0x05, 0x73, 0x1f, 0x48, 0x9c, 0x02, 0xd2, 0x63, 0x59, 0x90, 0xc7, 0x9e,
	0x28, 0x1c, 0x3c, 0xde, 0xc4, 0x86, 0x3d, 0x9c, 0x02, 0x68, 0x08, 0x9d, 0x63, 0x3b, 0x22, 0x63,
	0xc7, 0x09, 0x49, 0x14, 0x09, 0x57, 0xf4, 0xb0, 0x0e, 0x89, 0x5a, 0x93, 0x24, 0x9e, 0xf0, 0x47,
	0x0f, 0x6b, 0x88, 0x34, 0xcc, 0xdb, 0x35, 0xf1, 0x17, 0xb2, 0x56, 0xf5, 0x70, 0x32, 0xe6, 0x8a,
	0xcc, 0x7c, 0x87, 0xbc, 0x13, 0x71, 0xdd, 0xc3, 0x72, 0xc0, 0xfd, 0xff, 0x8d, 0x7b, 0xef, 0x9e,
	0xba, 0xe1, 0x8a, 0xeb, 0x62, 0x36, 0xc5, 0x64, 0x06, 0xb3, 0xfe, 0x5e, 0x85, 0xae, 0x0c, 0x18,
	0x55, 0x16, 0xf5, 0x80, 0x32, 0x72, 0x01, 0xc5, 0x83, 0x85, 0x3a, 0xb1, 0x76, 0xe2, 0xbb, 0x68,
	0x9c, 0xea, 0x7b, 0x8d, 0x53, 0xcb, 0x1b, 0x27, 0xab, 0x7a, 0x7d, 0xa3, 0xea, 0x8d, 0x9c, 0xea,
	0x7b, 0xd0, 0x38, 0xb7, 0x23, 0x76, 0x75, 0x22, 0xd4, 0xab, 0x61, 0x35, 0xe2, 0x35, 0x90, 0x7f,
	0x61, 0x12, 0x11, 0x76, 0x62, 0xaf, 0x23, 0x62, 0xb6, 0xc4, 0xca, 0x1c, 0xca, 0xcf, 0x3e, 0xf1,
	0xe8, 0xda, 0xb9, 0xa6, 0x7f, 0x20, 0xbe, 0x28, 0xb9, 0x6d, 0xac, 0x21, 0x79, 0xc7, 0x41, 0xd1,
	0x71, 0x63, 0xd8, 0x49, 0xea, 0x7d, 0x1c, 0x37, 0x66, 0x27, 0x53, 0x32, 0xf4, 0x70, 0xc2, 0x45,
	0x69, 0x5e, 0x99, 0xb8, 0x31, 0xe7, 0x2c, 0x54, 0x35, 0x38, 0x1e, 0x96, 0x97, 0xdf, 0x5e, 0xae,
	0xfc, 0x5a, 0xff, 0xaa, 0xc0, 0xae, 0x5e, 0x96, 0x26, 0x84, 0xd9, 0xae, 0xb7, 0xd9, 0x99, 0x09,
	0xcd, 0x54, 0x36, 0xd0, 0x8c, 0x66, 0x9a, 0x6a, 0xc1, 0x34, 0xaf, 0x00, 0xc6, 0x57, 0x57, 0x76,
	0x14, 0x3d, 0xd2, 0xd0, 0x51, 0x15, 0x44, 0x43, 0xb8, 0x0b, 0x2e, 0x28, 0x37, 0xf6, 0x82, 0xf8,
	0x6c, 0x3e, 0x9f, 0x4d, 0x54, 0x49, 0xce, 0xa1, 0x3c, 0x4e, 0x53, 0x64, 0x76, 0xa5, 0x78, 0x36,
	0x83, 0x71, 0x19, 0x2e, 0x9b, 0x9c, 0xd6, 0x94, 0x32, 0x3a, 0x56, 0x88, 0xf7, 0x56, 0x31, 0xde,
	0xd1, 0xcf, 0xe1, 0x85, 0xbe, 0x66, 0xfc, 0x60, 0xbb, 0x1e, 0xe7, 0x00, 0xe1, 0xf9, 0x16, 0x2e,
	0x9f, 0xb4, 0x3e, 0x4b, 0x8b, 0xd2, 0xa6, 0x02, 0x65, 0xfd, 0xcd, 0x80, 0xad, 0x9b, 0xc0, 0xb1,
	0x19, 0xe1, 0x87, 0x8a, 0xe2, 0xf1, 0x9e, 0x7c, 0x12, 0x66, 0x51, 0xb5, 0x5e, 0x18, 0x83, 0x17,
	0xf8, 0x2b, 0x65, 0xec, 0xca, 0xec, 0x8a, 0xaf, 0xcf, 0x99, 0x38, 0x19, 0xa3, 0x7d, 0xd8, 0x8e,
	0x15, 0x8b, 0xc3, 0x43, 0x26, 0x4f, 0x1e, 0x96, 0x4c, 0xcf, 0x63, 0x9e, 0xae, 0x7d, 0x46, 0x42,
	0x95, 0x45, 0x19, 0xcc, 0xc2, 0xd0, 0x97, 0x8a, 0x70, 0x12, 0x90, 0x5a, 0x6c, 0xac, 0xc6, 0x1f,
	0x40, 0xdd, 0xd6, 0x0d, 0xf4, 0xa5, 0xb6, 0xda, 0x9e, 0x9f, 0x43, 0x43, 0x62, 0xaa, 0x38, 0xbf,
	0xd0, 0x7b, 0x47, 0x45, 0xab, 0xe4, 0x1e, 0x2b, 0xa1, 0x52, 0x42, 0xfc, 0x3d, 0x20, 0xdd, 0xab,
	0xff, 0xdb, 0xc6, 0x26, 0x34, 0x63, 0xab, 0xc9, 0x82, 0x16, 0x0f, 0xad, 0x3f, 0x1a, 0xf0, 0x72,
	0xce, 0x68, 0x48, 0x4e, 0xa8, 0x7f, 0xef, 0x2e, 0x4f, 0x3d, 0x7b, 0x19, 0xc5, 0xfc, 0xf4, 0x91,
	0x87, 0xec, 0x41, 0x43, 0x2c, 0xff, 0x52, 0x9d, 0xa1, 0x46, 0x09, 0x7e, 0xa8, 0xea, 0xa5, 0x1a,
	0xf1, 0x4a, 0x2e, 0xbe, 0x84, 0xaf, 0x6b, 0x58, 0x0e, 0xac, 0x1f, 0x42, 0x47, 0xbb, 0x4a, 0x2a,
	0x64, 0xe8, 0x42, 0x03, 0xa8, 0x5d, 0x93, 0x77, 0x8c, 0x1b, 0x8c, 0xff, 0x17, 0x93, 0x6d, 0x2c,
	0xbe, 0xad, 0x25, 0xec, 0x1e, 0x0b, 0x8f, 0x5c, 0xd8, 0x6c, 0xf1, 0x2d, 0x26, 0x51, 0x40, 0xfd,
	0x88, 0x70, 0xd2, 0xce, 0xf6, 0x38, 0x31, 0x51, 0xe6, 0xba, 0x1b, 0x9d, 0xdd, 0x2b, 0x1b, 0xd9,
	0xfd, 0x1f, 0x06, 0xb4, 0x92, 0xd8, 0xff, 0x98, 0x66, 0xc5, 0x84, 0xe6, 0x49, 0x48, 0x6c, 0x46,
	0x1c, 0x65, 0x91, 0x78, 0x98, 0x64, 0x49, 0xad, 0x90, 0x25, 0xf5, 0xd2, 0x2c, 0x69, 0xe4, 0xb2,
	0x24, 0x21, 0xc7, 0xa6, 0x4e, 0x8e, 0x25, 0xb9, 0xd3, 0x2a, 0xcd, 0x1d, 0xeb, 0xcf, 0xb5, 0xd8,
	0xe5, 0x05, 0x85, 0xb4, 0x4b, 0x57, 0xb2, 0x97, 0xfe, 0x90, 0xde, 0x2b, 0x6d, 0x01, 0x6b, 0x99,
	0x17, 0x4e, 0x81, 0x52, 0xeb, 0x65, 0x94, 0xfa, 0x35, 0x6c, 0xdf, 0x04, 0xcb, 0xd0, 0x16, 0x3c,
	0x61, 0x33, 0xb2, 0x7c, 0x12, 0x9a, 0x6f, 0x1d, 0xee, 0x29, 0xd7, 0xe4, 0x66, 0x71, 0x5e, 0x5c,
	0x9c, 0x13, 0x04, 0x1a, 0xf3, 0x4a, 0x06, 0xcd, 0x82, 0x59, 0xea, 0x6e, 0xe5, 0xa9, 0x3b, 0xa5,
	0xdf, 0x76, 0x86, 0x7e, 0xb3, 0xdc, 0x01, 0xef, 0xa3, 0xd5, 0x4e, 0x91, 0x56, 0x8b, 0x04, 0xde,
	0x2d, 0x25, 0xf0, 0x21, 0x74, 0x38, 0x32, 0xf5, 0xdf, 0xae, 0xdd, 0xf0, 0x49, 0xf1, 0xa3, 0x0e,
	0x15, 0x39, 0x74, 0xab, 0x84, 0x43, 0xd3, 0xa4, 0xda, 0xd6, 0x92, 0x8a, 0xef, 0x2e, 0xc8, 0x90,
	0xf3, 0xe2, 0x6c, 0x62, 0xee, 0x08, 0x45, 0x74, 0xc8, 0xfa, 0xab, 0x01, 0xad, 0xc9, 0xf1, 0xff,
	0xf9, 0x79, 0xc3, 0xe9, 0x2e, 0xe9, 0xb7, 0x55, 0x80, 0xd4, 0x70, 0x06, 0x4b, 0x65, 0xae, 0x9f,
	0x02, 0xa2, 0xc8, 0x35, 0x91, 0x91, 0x58, 0x26, 0xe3, 0x1a, 0xd9, 0x8c, 0xe3, 0x17, 0x87, 0x74,
	0xc3, 0xb2, 0xd8, 0x9e, 0xb8, 0x0f, 0x2e, 0x6f, 0xa2, 0x55, 0x6c, 0xab, 0x21, 0xf7, 0xed, 0xc5,
	0xda, 0x63, 0x6e, 0xe0, 0xb9, 0x24, 0x54, 0xd9, 0xaa, 0x21, 0xfc, 0x50, 0xbe, 0xa3, 0xf6, 0xae,
	0x48, 0xc6, 0x7c, 0x2d, 0xff, 0xbe, 0x0a, 0xc9, 0xbd, 0xfb, 0x4e, 0x25, 0xb0, 0x86, 0x70, 0xa5,
	0x2e, 0x69, 0xb8, 0xb2, 0x3d, 0xa5, 0xb8, 0xbc, 0x74, 0x06, 0xb3, 0xbe, 0x88, 0xef, 0xcd, 0x95,
	0x2c, 0xdc, 0xbb, 0x84, 0x2f, 0x0e, 0x7e, 0x53, 0xc8, 0x15, 0xd4, 0x83, 0xf6, 0xcd, 0xe5, 0x64,
	0x7a, 0x3a, 0xbb, 0x9c, 0x4e, 0xfa, 0xdf, 0x41, 0xdb, 0xd0, 0x99, 0x5d, 0x5c, 0x4c, 0x27, 0xb3,
	0xf1, 0xf5, 0xf4, 0xfc, 0x77, 0x7d, 0x03, 0xb5, 0xa1, 0x7e, 0x39, 0xbd, 0x9d, 0xe2, 0x7e, 0xe5,
	0xf0, 0x9f, 0x2d, 0xe8, 0xce, 0x4f, 0xbe, 0x21, 0x77, 0x73, 0x12, 0x3e, 0xb8, 0x0b, 0xde, 0x44,
	0xf4, 0x04, 0x3d, 0x24, 0x85, 0xee, 0x45, 0x92, 0x72, 0x3a, 0xf7, 0x0f, 0xba, 0x23, 0xf5, 0xb3,
	0xca, 0x2d, 0x75, 0x1d, 0xf4, 0x1a, 0x7a, 0x67, 0x84, 0xc9, 0x9b, 0x1f, 0xf3, 0xa7, 0xf5, 0x76,
	0xa6, 0x86, 0xce, 0x26, 0x83, 0x6c, 0x51, 0x45, 0xbf, 0x8a, 0x9b, 0x3a, 0xf9, 0x98, 0x8e, 0x6b,
	0x31, 0x8c, 0xc4, 0x4f, 0x3b, 0x7c, 0xcf, 0xc1, 0xcb, 0x92, 0x37, 0xa9, 0x78, 0x8e, 0x1d, 0x40,
	0xfb, 0x8c, 0xb0, 0xb8, 0x6c, 0x29, 0x29, 0xf5, 0x40, 0x1d, 0x64, 0xab, 0x3c, 0xfa, 0x4a, 0x5c,
	0x4c, 0x0e, 0xc4, 0xc5, 0xca, 0x39, 0x2d, 0xbf, 0xec, 0x0b, 0x68, 0x9e, 0x11, 0x26, 0x1e, 0x01,
	0xcf, 0x2c, 0xc8, 0x9d, 0x8b, 0x8e, 0xb8, 0x42, 0x11, 0xf5, 0x1e, 0x48, 0x6c, 0x05, 0xb1, 0xba,
	0x9f, 0xe5, 0x12, 0xed, 0x24, 0x65, 0x88, 0x2f, 0xa1, 0x7f, 0x46, 0x98, 0xfa, 0xf5, 0x46, 0xfd,
	0x4a, 0xa2, 0x5b, 0x21, 0xfb, 0x44, 0x15, 0xfa, 0x63, 0xf8, 0xa4, 0xec, 0x95, 0x89, 0xac, 0xd8,
	0x60, 0xcf, 0x3f, 0x41, 0x07, 0x71, 0x01, 0xcd, 0xaf, 0x3d, 0x82, 0x1d, 0xe1, 0xf6, 0xcc, 0x7b,
	0x69, 0x37, 0x63, 0x14, 0x09, 0xe6, 0x1c, 0xff, 0x5b, 0xd8, 0x4e, 0xec, 0xab, 0x56, 0x3d, 0x63,
	0xb0, 0xb2, 0xcd, 0xd0, 0x19, 0xa0, 0x62, 0x6f, 0xff, 0xdc, 0x0e, 0x83, 0x92, 0x80, 0x88, 0x5f,
	0x03, 0xbf, 0x84, 0xbe, 0x0c, 0xd0, 0xb4, 0x25, 0x43, 0x2f, 0x33, 0x27, 0xa6, 0x5d, 0x5a, 0x4e,
	0x85, 0x64, 0x69, 0xda, 0x21, 0x26, 0x4b, 0xf3, 0x4d, 0x63, 0x41, 0x7b, 0x94, 0xa6, 0x45, 0xd2,
	0x87, 0x7f, 0x57, 0x2d, 0x2e, 0xb6, 0x71, 0xb9, 0xe5, 0x5f, 0x43, 0x3f, 0xdf, 0x8a, 0xa1, 0x57,
	0xf1, 0xc9, 0xe5, 0x3d, 0x5a, 0x6e, 0x87, 0x5f, 0xc3, 0xd6, 0x19, 0xef, 0x72, 0xd3, 0xf5, 0xcf,
	0xd8, 0x0e, 0xa9, 0x6d, 0x75, 0xd1, 0x9f, 0x40, 0x7b, 0xec, 0x38, 0x2a, 0xe2, 0xb3, 0x09, 0x90,
	0xcf, 0x87, 0x23, 0xe8, 0x68, 0x3d, 0x16, 0xea, 0xa8, 0x59, 0xde, 0x7f, 0x25, 0x6e, 0x29, 0x69,
	0xc2, 0x8e, 0x2d, 0x18, 0xfa, 0x84, 0xe9, 0x57, 0x52, 0x3f, 0xa9, 0xda, 0x81, 0x1b, 0xc9, 0x75,
	0x77, 0x0d, 0xf1, 0xa3, 0xe9, 0xcf, 0xfe, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x87, 0x4a, 0xc1, 0xee,
	0x2b, 0x16, 0x00, 0x00,
}
